//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------



namespace Scanner.Windows
{
    public partial class App : global::Windows.UI.Xaml.Markup.IXamlMetadataProvider
    {
        private global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlTypeInfoProvider _provider;

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(global::System.Type type)
        {
            if(_provider == null)
            {
                _provider = new global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlTypeInfoProvider();
            }
            return _provider.GetXamlTypeByType(type);
        }

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(string fullName)
        {
            if(_provider == null)
            {
                _provider = new global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlTypeInfoProvider();
            }
            return _provider.GetXamlTypeByName(fullName);
        }

        public global::Windows.UI.Xaml.Markup.XmlnsDefinition[] GetXmlnsDefinitions()
        {
            return new global::Windows.UI.Xaml.Markup.XmlnsDefinition[0];
        }
    }
}

namespace Scanner.Windows.Scanner_Windows_XamlTypeInfo
{
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal partial class XamlTypeInfoProvider
    {
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlTypeByType(global::System.Type type)
        {
            global::Windows.UI.Xaml.Markup.IXamlType xamlType;
            if (_xamlTypeCacheByType.TryGetValue(type, out xamlType))
            {
                return xamlType;
            }
            int typeIndex = LookupTypeIndexByType(type);
            if(typeIndex != -1)
            {
                xamlType = CreateXamlType(typeIndex);
            }
            if (xamlType != null)
            {
                _xamlTypeCacheByName.Add(xamlType.FullName, xamlType);
                _xamlTypeCacheByType.Add(xamlType.UnderlyingType, xamlType);
            }
            return xamlType;
        }

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlTypeByName(string typeName)
        {
            if (string.IsNullOrEmpty(typeName))
            {
                return null;
            }
            global::Windows.UI.Xaml.Markup.IXamlType xamlType;
            if (_xamlTypeCacheByName.TryGetValue(typeName, out xamlType))
            {
                return xamlType;
            }
            int typeIndex = LookupTypeIndexByName(typeName);
            if(typeIndex != -1)
            {
                xamlType = CreateXamlType(typeIndex);
            }
            if (xamlType != null)
            {
                _xamlTypeCacheByName.Add(xamlType.FullName, xamlType);
                _xamlTypeCacheByType.Add(xamlType.UnderlyingType, xamlType);
            }
            return xamlType;
        }

        public global::Windows.UI.Xaml.Markup.IXamlMember GetMemberByLongName(string longMemberName)
        {
            if (string.IsNullOrEmpty(longMemberName))
            {
                return null;
            }
            global::Windows.UI.Xaml.Markup.IXamlMember xamlMember;
            if (_xamlMembers.TryGetValue(longMemberName, out xamlMember))
            {
                return xamlMember;
            }
            xamlMember = CreateXamlMember(longMemberName);
            if (xamlMember != null)
            {
                _xamlMembers.Add(longMemberName, xamlMember);
            }
            return xamlMember;
        }

        global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlType>
                _xamlTypeCacheByName = new global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlType>();

        global::System.Collections.Generic.Dictionary<global::System.Type, global::Windows.UI.Xaml.Markup.IXamlType>
                _xamlTypeCacheByType = new global::System.Collections.Generic.Dictionary<global::System.Type, global::Windows.UI.Xaml.Markup.IXamlType>();

        global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlMember>
                _xamlMembers = new global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlMember>();

        string[] _typeNameTable = null;
        global::System.Type[] _typeTable = null;

        private void InitTypeTables()
        {
            _typeNameTable = new string[67];
            _typeNameTable[0] = "Scanner.Windows.ViewModels.ViewModelLocator";
            _typeNameTable[1] = "Object";
            _typeNameTable[2] = "Scanner.Windows.ViewModels.NavigationContext";
            _typeNameTable[3] = "Scanner.Core.Converters.DebugConverter";
            _typeNameTable[4] = "Scanner.Core.Converters.BooleanToVisibilityConverter";
            _typeNameTable[5] = "Scanner.Core.Converters.ItemClickedConverter";
            _typeNameTable[6] = "Scanner.Windows.Common.ViewBase";
            _typeNameTable[7] = "Windows.UI.Xaml.Controls.Page";
            _typeNameTable[8] = "Windows.UI.Xaml.Controls.UserControl";
            _typeNameTable[9] = "System.Windows.Input.ICommand";
            _typeNameTable[10] = "Scanner.Windows.ViewModels.CurrentCategoryViewModel";
            _typeNameTable[11] = "Scanner.Windows.ViewModels.ViewModel";
            _typeNameTable[12] = "GalaSoft.MvvmLight.ViewModelBase";
            _typeNameTable[13] = "GalaSoft.MvvmLight.ObservableObject";
            _typeNameTable[14] = "Boolean";
            _typeNameTable[15] = "String";
            _typeNameTable[16] = "System.Collections.Generic.IList`1<Object>";
            _typeNameTable[17] = "Scanner.Models.Category";
            _typeNameTable[18] = "GalaSoft.MvvmLight.Command.RelayCommand`1<Object>";
            _typeNameTable[19] = "Microsoft.Xaml.Interactivity.Interaction";
            _typeNameTable[20] = "Microsoft.Xaml.Interactivity.BehaviorCollection";
            _typeNameTable[21] = "Windows.UI.Xaml.DependencyObjectCollection";
            _typeNameTable[22] = "Windows.UI.Xaml.DependencyObject";
            _typeNameTable[23] = "Scanner.Windows.Common.GridViewSelectedItemBehavior";
            _typeNameTable[24] = "Scanner.Windows.Common.Behavior`1<Windows.UI.Xaml.Controls.GridView>";
            _typeNameTable[25] = "Windows.UI.Xaml.Controls.GridView";
            _typeNameTable[26] = "Microsoft.Xaml.Interactions.Core.EventTriggerBehavior";
            _typeNameTable[27] = "Microsoft.Xaml.Interactivity.ActionCollection";
            _typeNameTable[28] = "Microsoft.Xaml.Interactions.Core.InvokeCommandAction";
            _typeNameTable[29] = "Windows.UI.Xaml.Data.IValueConverter";
            _typeNameTable[30] = "Scanner.Windows.Views.CurrentCategoryView.CurrentCategoryView";
            _typeNameTable[31] = "Scanner.Windows.ViewModels.DocumentViewModel";
            _typeNameTable[32] = "Scanner.Models.Document";
            _typeNameTable[33] = "Windows.Storage.StorageFile";
            _typeNameTable[34] = "System.Collections.ObjectModel.ObservableCollection`1<String>";
            _typeNameTable[35] = "System.Collections.ObjectModel.Collection`1<String>";
            _typeNameTable[36] = "Scanner.Windows.Views.DocumentView.DocumentView";
            _typeNameTable[37] = "Scanner.Windows.ViewModels.MainViewModel";
            _typeNameTable[38] = "System.Collections.ObjectModel.ObservableCollection`1<Scanner.Models.Category>";
            _typeNameTable[39] = "System.Collections.ObjectModel.Collection`1<Scanner.Models.Category>";
            _typeNameTable[40] = "System.Collections.ObjectModel.ObservableCollection`1<Scanner.Models.Document>";
            _typeNameTable[41] = "System.Collections.ObjectModel.Collection`1<Scanner.Models.Document>";
            _typeNameTable[42] = "System.Collections.ObjectModel.ObservableCollection`1<Scanner.Models.Page>";
            _typeNameTable[43] = "System.Collections.ObjectModel.Collection`1<Scanner.Models.Page>";
            _typeNameTable[44] = "Scanner.Models.Page";
            _typeNameTable[45] = "Guid";
            _typeNameTable[46] = "System.ValueType";
            _typeNameTable[47] = "Int32";
            _typeNameTable[48] = "UInt64";
            _typeNameTable[49] = "Double";
            _typeNameTable[50] = "Scanner.Core.ControlExtensions.FlyoutExtensions";
            _typeNameTable[51] = "Windows.UI.Xaml.Controls.Button";
            _typeNameTable[52] = "Scanner.Windows.Views.MainView.MainView";
            _typeNameTable[53] = "Scanner.Windows.Views.PhotoView.CustomControl";
            _typeNameTable[54] = "Windows.Foundation.Point";
            _typeNameTable[55] = "Scanner.Core.ControlExtentions.ImageExtensions";
            _typeNameTable[56] = "Windows.UI.Xaml.UIElement";
            _typeNameTable[57] = "Scanner.Core.Converters.PositionConverter";
            _typeNameTable[58] = "Scanner.Windows.Views.PhotoView.CropControl";
            _typeNameTable[59] = "Scanner.Windows.ViewModels.PhotoViewModel";
            _typeNameTable[60] = "Scanner.Models.PhotoCapturedData";
            _typeNameTable[61] = "System.Collections.ObjectModel.ObservableCollection`1<Double>";
            _typeNameTable[62] = "System.Collections.ObjectModel.Collection`1<Double>";
            _typeNameTable[63] = "Scanner.Models.CropControlPointsData";
            _typeNameTable[64] = "Scanner.Windows.Views.PhotoView.PhotoView";
            _typeNameTable[65] = "Scanner.Windows.ViewModels.PostProccesViewModel";
            _typeNameTable[66] = "Scanner.Windows.Views.PostProccesView.PostProccesView";

            _typeTable = new global::System.Type[67];
            _typeTable[0] = typeof(global::Scanner.Windows.ViewModels.ViewModelLocator);
            _typeTable[1] = typeof(global::System.Object);
            _typeTable[2] = typeof(global::Scanner.Windows.ViewModels.NavigationContext);
            _typeTable[3] = typeof(global::Scanner.Core.Converters.DebugConverter);
            _typeTable[4] = typeof(global::Scanner.Core.Converters.BooleanToVisibilityConverter);
            _typeTable[5] = typeof(global::Scanner.Core.Converters.ItemClickedConverter);
            _typeTable[6] = typeof(global::Scanner.Windows.Common.ViewBase);
            _typeTable[7] = typeof(global::Windows.UI.Xaml.Controls.Page);
            _typeTable[8] = typeof(global::Windows.UI.Xaml.Controls.UserControl);
            _typeTable[9] = typeof(global::System.Windows.Input.ICommand);
            _typeTable[10] = typeof(global::Scanner.Windows.ViewModels.CurrentCategoryViewModel);
            _typeTable[11] = typeof(global::Scanner.Windows.ViewModels.ViewModel);
            _typeTable[12] = typeof(global::GalaSoft.MvvmLight.ViewModelBase);
            _typeTable[13] = typeof(global::GalaSoft.MvvmLight.ObservableObject);
            _typeTable[14] = typeof(global::System.Boolean);
            _typeTable[15] = typeof(global::System.String);
            _typeTable[16] = typeof(global::System.Collections.Generic.IList<global::System.Object>);
            _typeTable[17] = typeof(global::Scanner.Models.Category);
            _typeTable[18] = typeof(global::GalaSoft.MvvmLight.Command.RelayCommand<global::System.Object>);
            _typeTable[19] = typeof(global::Microsoft.Xaml.Interactivity.Interaction);
            _typeTable[20] = typeof(global::Microsoft.Xaml.Interactivity.BehaviorCollection);
            _typeTable[21] = typeof(global::Windows.UI.Xaml.DependencyObjectCollection);
            _typeTable[22] = typeof(global::Windows.UI.Xaml.DependencyObject);
            _typeTable[23] = typeof(global::Scanner.Windows.Common.GridViewSelectedItemBehavior);
            _typeTable[24] = typeof(global::Scanner.Windows.Common.Behavior<global::Windows.UI.Xaml.Controls.GridView>);
            _typeTable[25] = typeof(global::Windows.UI.Xaml.Controls.GridView);
            _typeTable[26] = typeof(global::Microsoft.Xaml.Interactions.Core.EventTriggerBehavior);
            _typeTable[27] = typeof(global::Microsoft.Xaml.Interactivity.ActionCollection);
            _typeTable[28] = typeof(global::Microsoft.Xaml.Interactions.Core.InvokeCommandAction);
            _typeTable[29] = typeof(global::Windows.UI.Xaml.Data.IValueConverter);
            _typeTable[30] = typeof(global::Scanner.Windows.Views.CurrentCategoryView.CurrentCategoryView);
            _typeTable[31] = typeof(global::Scanner.Windows.ViewModels.DocumentViewModel);
            _typeTable[32] = typeof(global::Scanner.Models.Document);
            _typeTable[33] = typeof(global::Windows.Storage.StorageFile);
            _typeTable[34] = typeof(global::System.Collections.ObjectModel.ObservableCollection<global::System.String>);
            _typeTable[35] = typeof(global::System.Collections.ObjectModel.Collection<global::System.String>);
            _typeTable[36] = typeof(global::Scanner.Windows.Views.DocumentView.DocumentView);
            _typeTable[37] = typeof(global::Scanner.Windows.ViewModels.MainViewModel);
            _typeTable[38] = typeof(global::System.Collections.ObjectModel.ObservableCollection<global::Scanner.Models.Category>);
            _typeTable[39] = typeof(global::System.Collections.ObjectModel.Collection<global::Scanner.Models.Category>);
            _typeTable[40] = typeof(global::System.Collections.ObjectModel.ObservableCollection<global::Scanner.Models.Document>);
            _typeTable[41] = typeof(global::System.Collections.ObjectModel.Collection<global::Scanner.Models.Document>);
            _typeTable[42] = typeof(global::System.Collections.ObjectModel.ObservableCollection<global::Scanner.Models.Page>);
            _typeTable[43] = typeof(global::System.Collections.ObjectModel.Collection<global::Scanner.Models.Page>);
            _typeTable[44] = typeof(global::Scanner.Models.Page);
            _typeTable[45] = typeof(global::System.Guid);
            _typeTable[46] = typeof(global::System.ValueType);
            _typeTable[47] = typeof(global::System.Int32);
            _typeTable[48] = typeof(global::System.UInt64);
            _typeTable[49] = typeof(global::System.Double);
            _typeTable[50] = typeof(global::Scanner.Core.ControlExtensions.FlyoutExtensions);
            _typeTable[51] = typeof(global::Windows.UI.Xaml.Controls.Button);
            _typeTable[52] = typeof(global::Scanner.Windows.Views.MainView.MainView);
            _typeTable[53] = typeof(global::Scanner.Windows.Views.PhotoView.CustomControl);
            _typeTable[54] = typeof(global::Windows.Foundation.Point);
            _typeTable[55] = typeof(global::Scanner.Core.ControlExtentions.ImageExtensions);
            _typeTable[56] = typeof(global::Windows.UI.Xaml.UIElement);
            _typeTable[57] = typeof(global::Scanner.Core.Converters.PositionConverter);
            _typeTable[58] = typeof(global::Scanner.Windows.Views.PhotoView.CropControl);
            _typeTable[59] = typeof(global::Scanner.Windows.ViewModels.PhotoViewModel);
            _typeTable[60] = typeof(global::Scanner.Models.PhotoCapturedData);
            _typeTable[61] = typeof(global::System.Collections.ObjectModel.ObservableCollection<global::System.Double>);
            _typeTable[62] = typeof(global::System.Collections.ObjectModel.Collection<global::System.Double>);
            _typeTable[63] = typeof(global::Scanner.Models.CropControlPointsData);
            _typeTable[64] = typeof(global::Scanner.Windows.Views.PhotoView.PhotoView);
            _typeTable[65] = typeof(global::Scanner.Windows.ViewModels.PostProccesViewModel);
            _typeTable[66] = typeof(global::Scanner.Windows.Views.PostProccesView.PostProccesView);
        }

        private int LookupTypeIndexByName(string typeName)
        {
            if (_typeNameTable == null)
            {
                InitTypeTables();
            }
            for (int i=0; i<_typeNameTable.Length; i++)
            {
                if(0 == string.CompareOrdinal(_typeNameTable[i], typeName))
                {
                    return i;
                }
            }
            return -1;
        }

        private int LookupTypeIndexByType(global::System.Type type)
        {
            if (_typeTable == null)
            {
                InitTypeTables();
            }
            for(int i=0; i<_typeTable.Length; i++)
            {
                if(type == _typeTable[i])
                {
                    return i;
                }
            }
            return -1;
        }

        private object Activate_0_ViewModelLocator() { return new global::Scanner.Windows.ViewModels.ViewModelLocator(); }
        private object Activate_2_NavigationContext() { return new global::Scanner.Windows.ViewModels.NavigationContext(); }
        private object Activate_3_DebugConverter() { return new global::Scanner.Core.Converters.DebugConverter(); }
        private object Activate_4_BooleanToVisibilityConverter() { return new global::Scanner.Core.Converters.BooleanToVisibilityConverter(); }
        private object Activate_5_ItemClickedConverter() { return new global::Scanner.Core.Converters.ItemClickedConverter(); }
        private object Activate_6_ViewBase() { return new global::Scanner.Windows.Common.ViewBase(); }
        private object Activate_10_CurrentCategoryViewModel() { return new global::Scanner.Windows.ViewModels.CurrentCategoryViewModel(); }
        private object Activate_11_ViewModel() { return new global::Scanner.Windows.ViewModels.ViewModel(); }
        private object Activate_13_ObservableObject() { return new global::GalaSoft.MvvmLight.ObservableObject(); }
        private object Activate_17_Category() { return new global::Scanner.Models.Category(); }
        private object Activate_20_BehaviorCollection() { return new global::Microsoft.Xaml.Interactivity.BehaviorCollection(); }
        private object Activate_23_GridViewSelectedItemBehavior() { return new global::Scanner.Windows.Common.GridViewSelectedItemBehavior(); }
        private object Activate_26_EventTriggerBehavior() { return new global::Microsoft.Xaml.Interactions.Core.EventTriggerBehavior(); }
        private object Activate_27_ActionCollection() { return new global::Microsoft.Xaml.Interactivity.ActionCollection(); }
        private object Activate_28_InvokeCommandAction() { return new global::Microsoft.Xaml.Interactions.Core.InvokeCommandAction(); }
        private object Activate_30_CurrentCategoryView() { return new global::Scanner.Windows.Views.CurrentCategoryView.CurrentCategoryView(); }
        private object Activate_31_DocumentViewModel() { return new global::Scanner.Windows.ViewModels.DocumentViewModel(); }
        private object Activate_32_Document() { return new global::Scanner.Models.Document(); }
        private object Activate_34_ObservableCollection() { return new global::System.Collections.ObjectModel.ObservableCollection<global::System.String>(); }
        private object Activate_35_Collection() { return new global::System.Collections.ObjectModel.Collection<global::System.String>(); }
        private object Activate_36_DocumentView() { return new global::Scanner.Windows.Views.DocumentView.DocumentView(); }
        private object Activate_37_MainViewModel() { return new global::Scanner.Windows.ViewModels.MainViewModel(); }
        private object Activate_38_ObservableCollection() { return new global::System.Collections.ObjectModel.ObservableCollection<global::Scanner.Models.Category>(); }
        private object Activate_39_Collection() { return new global::System.Collections.ObjectModel.Collection<global::Scanner.Models.Category>(); }
        private object Activate_40_ObservableCollection() { return new global::System.Collections.ObjectModel.ObservableCollection<global::Scanner.Models.Document>(); }
        private object Activate_41_Collection() { return new global::System.Collections.ObjectModel.Collection<global::Scanner.Models.Document>(); }
        private object Activate_42_ObservableCollection() { return new global::System.Collections.ObjectModel.ObservableCollection<global::Scanner.Models.Page>(); }
        private object Activate_43_Collection() { return new global::System.Collections.ObjectModel.Collection<global::Scanner.Models.Page>(); }
        private object Activate_44_Page() { return new global::Scanner.Models.Page(); }
        private object Activate_50_FlyoutExtensions() { return new global::Scanner.Core.ControlExtensions.FlyoutExtensions(); }
        private object Activate_52_MainView() { return new global::Scanner.Windows.Views.MainView.MainView(); }
        private object Activate_53_CustomControl() { return new global::Scanner.Windows.Views.PhotoView.CustomControl(); }
        private object Activate_55_ImageExtensions() { return new global::Scanner.Core.ControlExtentions.ImageExtensions(); }
        private object Activate_57_PositionConverter() { return new global::Scanner.Core.Converters.PositionConverter(); }
        private object Activate_58_CropControl() { return new global::Scanner.Windows.Views.PhotoView.CropControl(); }
        private object Activate_59_PhotoViewModel() { return new global::Scanner.Windows.ViewModels.PhotoViewModel(); }
        private object Activate_61_ObservableCollection() { return new global::System.Collections.ObjectModel.ObservableCollection<global::System.Double>(); }
        private object Activate_62_Collection() { return new global::System.Collections.ObjectModel.Collection<global::System.Double>(); }
        private object Activate_63_CropControlPointsData() { return new global::Scanner.Models.CropControlPointsData(); }
        private object Activate_64_PhotoView() { return new global::Scanner.Windows.Views.PhotoView.PhotoView(); }
        private object Activate_65_PostProccesViewModel() { return new global::Scanner.Windows.ViewModels.PostProccesViewModel(); }
        private object Activate_66_PostProccesView() { return new global::Scanner.Windows.Views.PostProccesView.PostProccesView(); }
        private void VectorAdd_16_IList(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::System.Object>)instance;
            var newItem = (global::System.Object)item;
            collection.Add(newItem);
        }
        private void VectorAdd_20_BehaviorCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Windows.UI.Xaml.DependencyObject>)instance;
            var newItem = (global::Windows.UI.Xaml.DependencyObject)item;
            collection.Add(newItem);
        }
        private void VectorAdd_27_ActionCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Windows.UI.Xaml.DependencyObject>)instance;
            var newItem = (global::Windows.UI.Xaml.DependencyObject)item;
            collection.Add(newItem);
        }
        private void VectorAdd_34_ObservableCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::System.String>)instance;
            var newItem = (global::System.String)item;
            collection.Add(newItem);
        }
        private void VectorAdd_35_Collection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::System.String>)instance;
            var newItem = (global::System.String)item;
            collection.Add(newItem);
        }
        private void VectorAdd_38_ObservableCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Scanner.Models.Category>)instance;
            var newItem = (global::Scanner.Models.Category)item;
            collection.Add(newItem);
        }
        private void VectorAdd_39_Collection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Scanner.Models.Category>)instance;
            var newItem = (global::Scanner.Models.Category)item;
            collection.Add(newItem);
        }
        private void VectorAdd_40_ObservableCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Scanner.Models.Document>)instance;
            var newItem = (global::Scanner.Models.Document)item;
            collection.Add(newItem);
        }
        private void VectorAdd_41_Collection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Scanner.Models.Document>)instance;
            var newItem = (global::Scanner.Models.Document)item;
            collection.Add(newItem);
        }
        private void VectorAdd_42_ObservableCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Scanner.Models.Page>)instance;
            var newItem = (global::Scanner.Models.Page)item;
            collection.Add(newItem);
        }
        private void VectorAdd_43_Collection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Scanner.Models.Page>)instance;
            var newItem = (global::Scanner.Models.Page)item;
            collection.Add(newItem);
        }
        private void VectorAdd_61_ObservableCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::System.Double>)instance;
            var newItem = (global::System.Double)item;
            collection.Add(newItem);
        }
        private void VectorAdd_62_Collection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::System.Double>)instance;
            var newItem = (global::System.Double)item;
            collection.Add(newItem);
        }

        private global::Windows.UI.Xaml.Markup.IXamlType CreateXamlType(int typeIndex)
        {
            global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlSystemBaseType xamlType = null;
            global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlUserType userType;
            string typeName = _typeNameTable[typeIndex];
            global::System.Type type = _typeTable[typeIndex];

            switch (typeIndex)
            {

            case 0:   //  Scanner.Windows.ViewModels.ViewModelLocator
                userType = new global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_0_ViewModelLocator;
                userType.AddMemberName("NavigationContext");
                xamlType = userType;
                break;

            case 1:   //  Object
                xamlType = new global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 2:   //  Scanner.Windows.ViewModels.NavigationContext
                userType = new global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 3:   //  Scanner.Core.Converters.DebugConverter
                userType = new global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_3_DebugConverter;
                xamlType = userType;
                break;

            case 4:   //  Scanner.Core.Converters.BooleanToVisibilityConverter
                userType = new global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_4_BooleanToVisibilityConverter;
                xamlType = userType;
                break;

            case 5:   //  Scanner.Core.Converters.ItemClickedConverter
                userType = new global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_5_ItemClickedConverter;
                xamlType = userType;
                break;

            case 6:   //  Scanner.Windows.Common.ViewBase
                userType = new global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_6_ViewBase;
                userType.AddMemberName("OnNavigatedToCommand");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 7:   //  Windows.UI.Xaml.Controls.Page
                xamlType = new global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 8:   //  Windows.UI.Xaml.Controls.UserControl
                xamlType = new global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 9:   //  System.Windows.Input.ICommand
                userType = new global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, null);
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 10:   //  Scanner.Windows.ViewModels.CurrentCategoryViewModel
                userType = new global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Scanner.Windows.ViewModels.ViewModel"));
                userType.Activator = Activate_10_CurrentCategoryViewModel;
                userType.AddMemberName("IsBottomAppBarOpen");
                userType.AddMemberName("IsBottomAppBarSticky");
                userType.AddMemberName("IsCategoryEmpty");
                userType.AddMemberName("CurrentCategoryName");
                userType.AddMemberName("NavigationContext");
                userType.AddMemberName("SelectedItems");
                userType.AddMemberName("CurrentCategory");
                userType.AddMemberName("IsTopAppBarVisible");
                userType.AddMemberName("BackCommand");
                userType.AddMemberName("DeleteDocumentCommand");
                userType.AddMemberName("DeleteCategoryCommand");
                userType.AddMemberName("MergeDocumentsCommand");
                userType.AddMemberName("RenameCategoryCommand");
                userType.AddMemberName("AddDocumentCommand");
                userType.AddMemberName("SelectionChangedCommand");
                userType.AddMemberName("NewScanCommand");
                userType.AddMemberName("PinCategoryCommand");
                userType.AddMemberName("DocumentItemClickCommand");
                xamlType = userType;
                break;

            case 11:   //  Scanner.Windows.ViewModels.ViewModel
                userType = new global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("GalaSoft.MvvmLight.ViewModelBase"));
                userType.Activator = Activate_11_ViewModel;
                userType.AddMemberName("OnNavigatedToCommand");
                xamlType = userType;
                break;

            case 12:   //  GalaSoft.MvvmLight.ViewModelBase
                userType = new global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("GalaSoft.MvvmLight.ObservableObject"));
                userType.AddMemberName("IsInDesignMode");
                xamlType = userType;
                break;

            case 13:   //  GalaSoft.MvvmLight.ObservableObject
                userType = new global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_13_ObservableObject;
                xamlType = userType;
                break;

            case 14:   //  Boolean
                xamlType = new global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 15:   //  String
                xamlType = new global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 16:   //  System.Collections.Generic.IList`1<Object>
                userType = new global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, null);
                userType.CollectionAdd = VectorAdd_16_IList;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 17:   //  Scanner.Models.Category
                userType = new global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_17_Category;
                userType.AddMemberName("CategoryDocuments");
                userType.AddMemberName("IsPinned");
                userType.AddMemberName("CategoryName");
                userType.AddMemberName("ID");
                xamlType = userType;
                break;

            case 18:   //  GalaSoft.MvvmLight.Command.RelayCommand`1<Object>
                userType = new global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 19:   //  Microsoft.Xaml.Interactivity.Interaction
                userType = new global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.AddMemberName("Behaviors");
                xamlType = userType;
                break;

            case 20:   //  Microsoft.Xaml.Interactivity.BehaviorCollection
                userType = new global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.DependencyObjectCollection"));
                userType.CollectionAdd = VectorAdd_20_BehaviorCollection;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 21:   //  Windows.UI.Xaml.DependencyObjectCollection
                xamlType = new global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 22:   //  Windows.UI.Xaml.DependencyObject
                xamlType = new global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 23:   //  Scanner.Windows.Common.GridViewSelectedItemBehavior
                userType = new global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Scanner.Windows.Common.Behavior`1<Windows.UI.Xaml.Controls.GridView>"));
                userType.Activator = Activate_23_GridViewSelectedItemBehavior;
                userType.AddMemberName("SelectedItems");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 24:   //  Scanner.Windows.Common.Behavior`1<Windows.UI.Xaml.Controls.GridView>
                userType = new global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.DependencyObject"));
                userType.AddMemberName("AssociatedObject");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 25:   //  Windows.UI.Xaml.Controls.GridView
                xamlType = new global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 26:   //  Microsoft.Xaml.Interactions.Core.EventTriggerBehavior
                userType = new global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.DependencyObject"));
                userType.Activator = Activate_26_EventTriggerBehavior;
                userType.SetContentPropertyName("Microsoft.Xaml.Interactions.Core.EventTriggerBehavior.Actions");
                userType.AddMemberName("Actions");
                userType.AddMemberName("EventName");
                userType.AddMemberName("SourceObject");
                userType.AddMemberName("AssociatedObject");
                xamlType = userType;
                break;

            case 27:   //  Microsoft.Xaml.Interactivity.ActionCollection
                userType = new global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.DependencyObjectCollection"));
                userType.CollectionAdd = VectorAdd_27_ActionCollection;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 28:   //  Microsoft.Xaml.Interactions.Core.InvokeCommandAction
                userType = new global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.DependencyObject"));
                userType.Activator = Activate_28_InvokeCommandAction;
                userType.AddMemberName("Command");
                userType.AddMemberName("InputConverter");
                userType.AddMemberName("CommandParameter");
                userType.AddMemberName("InputConverterParameter");
                userType.AddMemberName("InputConverterLanguage");
                xamlType = userType;
                break;

            case 29:   //  Windows.UI.Xaml.Data.IValueConverter
                xamlType = new global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 30:   //  Scanner.Windows.Views.CurrentCategoryView.CurrentCategoryView
                userType = new global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Scanner.Windows.Common.ViewBase"));
                userType.Activator = Activate_30_CurrentCategoryView;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 31:   //  Scanner.Windows.ViewModels.DocumentViewModel
                userType = new global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Scanner.Windows.ViewModels.ViewModel"));
                userType.Activator = Activate_31_DocumentViewModel;
                userType.AddMemberName("CurrentDocument");
                userType.AddMemberName("CapturedImage");
                userType.AddMemberName("NavigationContext");
                userType.AddMemberName("CategoryNames");
                userType.AddMemberName("SelectedCategoryName");
                userType.AddMemberName("SelectedItems");
                userType.AddMemberName("IsBottomAppBarOpen");
                userType.AddMemberName("IsBottomAppBarSticky");
                userType.AddMemberName("DeleteCurrentDocumentCommand");
                userType.AddMemberName("BackCommand");
                userType.AddMemberName("AddPageCommand");
                userType.AddMemberName("PageItemClickCommand");
                userType.AddMemberName("AddFromGalleryCommand");
                userType.AddMemberName("RenameDocumentCommand");
                userType.AddMemberName("LoadCategoryNamesCommand");
                userType.AddMemberName("MoveToCategoryCommand");
                userType.AddMemberName("PinDocumentCommand");
                userType.AddMemberName("MergePagesCommand");
                userType.AddMemberName("DeletePagesCommand");
                userType.AddMemberName("SelectionChangedCommand");
                xamlType = userType;
                break;

            case 32:   //  Scanner.Models.Document
                userType = new global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_32_Document;
                userType.AddMemberName("Pages");
                userType.AddMemberName("DocumentName");
                userType.AddMemberName("DateCreated");
                userType.AddMemberName("TimeCreated");
                userType.AddMemberName("DocumentSize");
                userType.AddMemberName("DocumentPageCounter");
                userType.AddMemberName("DocumentCategory");
                userType.AddMemberName("ID");
                userType.AddMemberName("IsPinned");
                xamlType = userType;
                break;

            case 33:   //  Windows.Storage.StorageFile
                userType = new global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 34:   //  System.Collections.ObjectModel.ObservableCollection`1<String>
                userType = new global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Collections.ObjectModel.Collection`1<String>"));
                userType.CollectionAdd = VectorAdd_34_ObservableCollection;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 35:   //  System.Collections.ObjectModel.Collection`1<String>
                userType = new global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_35_Collection;
                userType.CollectionAdd = VectorAdd_35_Collection;
                xamlType = userType;
                break;

            case 36:   //  Scanner.Windows.Views.DocumentView.DocumentView
                userType = new global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Scanner.Windows.Common.ViewBase"));
                userType.Activator = Activate_36_DocumentView;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 37:   //  Scanner.Windows.ViewModels.MainViewModel
                userType = new global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Scanner.Windows.ViewModels.ViewModel"));
                userType.Activator = Activate_37_MainViewModel;
                userType.AddMemberName("NavigateCommand");
                userType.AddMemberName("PhotoCommand");
                userType.AddMemberName("ImageProcessCommand");
                userType.AddMemberName("ImportCommand");
                userType.AddMemberName("GetAllDocumentsCommand");
                userType.AddMemberName("ShowNewCategoryDialogCommand");
                userType.AddMemberName("AddNewCategoryCommand");
                userType.AddMemberName("BatchModeCommand");
                userType.AddMemberName("AllCategoryDocumentsCommand");
                userType.AddMemberName("AllDocumentsCommand");
                userType.AddMemberName("DocumentItemClickCommand");
                userType.AddMemberName("LoadDataCommand");
                userType.AddMemberName("SortItemsCommand");
                userType.AddMemberName("NewCategoryString");
                userType.AddMemberName("Categories");
                userType.AddMemberName("NavigationContext");
                userType.AddMemberName("ComboBoxSelectedValue");
                userType.AddMemberName("IsFlyoutOpen");
                xamlType = userType;
                break;

            case 38:   //  System.Collections.ObjectModel.ObservableCollection`1<Scanner.Models.Category>
                userType = new global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Collections.ObjectModel.Collection`1<Scanner.Models.Category>"));
                userType.CollectionAdd = VectorAdd_38_ObservableCollection;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 39:   //  System.Collections.ObjectModel.Collection`1<Scanner.Models.Category>
                userType = new global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_39_Collection;
                userType.CollectionAdd = VectorAdd_39_Collection;
                xamlType = userType;
                break;

            case 40:   //  System.Collections.ObjectModel.ObservableCollection`1<Scanner.Models.Document>
                userType = new global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Collections.ObjectModel.Collection`1<Scanner.Models.Document>"));
                userType.CollectionAdd = VectorAdd_40_ObservableCollection;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 41:   //  System.Collections.ObjectModel.Collection`1<Scanner.Models.Document>
                userType = new global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_41_Collection;
                userType.CollectionAdd = VectorAdd_41_Collection;
                xamlType = userType;
                break;

            case 42:   //  System.Collections.ObjectModel.ObservableCollection`1<Scanner.Models.Page>
                userType = new global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Collections.ObjectModel.Collection`1<Scanner.Models.Page>"));
                userType.CollectionAdd = VectorAdd_42_ObservableCollection;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 43:   //  System.Collections.ObjectModel.Collection`1<Scanner.Models.Page>
                userType = new global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_43_Collection;
                userType.CollectionAdd = VectorAdd_43_Collection;
                xamlType = userType;
                break;

            case 44:   //  Scanner.Models.Page
                userType = new global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_44_Page;
                userType.AddMemberName("ID");
                userType.AddMemberName("PageName");
                userType.AddMemberName("DocumentId");
                userType.AddMemberName("OriginalFilePath");
                userType.AddMemberName("ProcessedFilePath");
                userType.AddMemberName("Number");
                userType.AddMemberName("Size");
                userType.AddMemberName("IsFromCamera");
                userType.AddMemberName("MbSize");
                xamlType = userType;
                break;

            case 45:   //  Guid
                userType = new global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 46:   //  System.ValueType
                userType = new global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case 47:   //  Int32
                xamlType = new global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 48:   //  UInt64
                xamlType = new global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 49:   //  Double
                xamlType = new global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 50:   //  Scanner.Core.ControlExtensions.FlyoutExtensions
                userType = new global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.DependencyObject"));
                userType.Activator = Activate_50_FlyoutExtensions;
                userType.AddMemberName("IsOpen");
                userType.AddMemberName("Parent");
                xamlType = userType;
                break;

            case 51:   //  Windows.UI.Xaml.Controls.Button
                xamlType = new global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 52:   //  Scanner.Windows.Views.MainView.MainView
                userType = new global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Scanner.Windows.Common.ViewBase"));
                userType.Activator = Activate_52_MainView;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 53:   //  Scanner.Windows.Views.PhotoView.CustomControl
                userType = new global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_53_CustomControl;
                userType.AddMemberName("CurrentPosition");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 54:   //  Windows.Foundation.Point
                xamlType = new global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 55:   //  Scanner.Core.ControlExtentions.ImageExtensions
                userType = new global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.DependencyObject"));
                userType.Activator = Activate_55_ImageExtensions;
                userType.AddMemberName("File");
                xamlType = userType;
                break;

            case 56:   //  Windows.UI.Xaml.UIElement
                xamlType = new global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 57:   //  Scanner.Core.Converters.PositionConverter
                userType = new global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_57_PositionConverter;
                xamlType = userType;
                break;

            case 58:   //  Scanner.Windows.Views.PhotoView.CropControl
                userType = new global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_58_CropControl;
                userType.AddMemberName("ImageFile");
                userType.AddMemberName("LeftTopPosition");
                userType.AddMemberName("RightTopPosition");
                userType.AddMemberName("LeftBottomPosition");
                userType.AddMemberName("RightBottomPosition");
                userType.AddMemberName("LeftTopX");
                userType.AddMemberName("LeftTopY");
                userType.AddMemberName("RightTopX");
                userType.AddMemberName("RightTopY");
                userType.AddMemberName("LeftBottomX");
                userType.AddMemberName("LeftBottomY");
                userType.AddMemberName("RightBottomY");
                userType.AddMemberName("RightBottomX");
                userType.AddMemberName("CropActualWidth");
                userType.AddMemberName("CropActualHeight");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 59:   //  Scanner.Windows.ViewModels.PhotoViewModel
                userType = new global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Scanner.Windows.ViewModels.ViewModel"));
                userType.Activator = Activate_59_PhotoViewModel;
                userType.AddMemberName("NavigationContext");
                userType.AddMemberName("CurrentCapturedData");
                userType.AddMemberName("PageToProcces");
                userType.AddMemberName("CapturedImage");
                userType.AddMemberName("RotationAngle");
                userType.AddMemberName("Points");
                userType.AddMemberName("PointsData");
                userType.AddMemberName("CropControlWidth");
                userType.AddMemberName("CropControlHeight");
                userType.AddMemberName("RotateRightCommand");
                userType.AddMemberName("RotateLeftCommand");
                userType.AddMemberName("ProccesCommand");
                userType.AddMemberName("BackCommand");
                userType.AddMemberName("DeletePageCommand");
                userType.AddMemberName("ResetEdgesCommand");
                userType.AddMemberName("LoadPointPresetsCommand");
                xamlType = userType;
                break;

            case 60:   //  Scanner.Models.PhotoCapturedData
                userType = new global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 61:   //  System.Collections.ObjectModel.ObservableCollection`1<Double>
                userType = new global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Collections.ObjectModel.Collection`1<Double>"));
                userType.CollectionAdd = VectorAdd_61_ObservableCollection;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 62:   //  System.Collections.ObjectModel.Collection`1<Double>
                userType = new global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_62_Collection;
                userType.CollectionAdd = VectorAdd_62_Collection;
                xamlType = userType;
                break;

            case 63:   //  Scanner.Models.CropControlPointsData
                userType = new global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 64:   //  Scanner.Windows.Views.PhotoView.PhotoView
                userType = new global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Scanner.Windows.Common.ViewBase"));
                userType.Activator = Activate_64_PhotoView;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 65:   //  Scanner.Windows.ViewModels.PostProccesViewModel
                userType = new global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Scanner.Windows.ViewModels.ViewModel"));
                userType.Activator = Activate_65_PostProccesViewModel;
                userType.AddMemberName("CurrentDocument");
                userType.AddMemberName("NavigationContext");
                userType.AddMemberName("CapturedImage");
                userType.AddMemberName("SelectedPage");
                userType.AddMemberName("BackCommand");
                userType.AddMemberName("RescanCommand");
                userType.AddMemberName("FlipViewSelectionChangedCommand");
                userType.AddMemberName("DeletePageCommand");
                userType.AddMemberName("SelectFilterCommand");
                userType.AddMemberName("UndoRedoCommand");
                xamlType = userType;
                break;

            case 66:   //  Scanner.Windows.Views.PostProccesView.PostProccesView
                userType = new global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Scanner.Windows.Common.ViewBase"));
                userType.Activator = Activate_66_PostProccesView;
                userType.SetIsLocalType();
                xamlType = userType;
                break;
            }
            return xamlType;
        }


        private object get_0_ViewModelLocator_NavigationContext(object instance)
        {
            var that = (global::Scanner.Windows.ViewModels.ViewModelLocator)instance;
            return that.NavigationContext;
        }
        private object get_1_ViewBase_OnNavigatedToCommand(object instance)
        {
            var that = (global::Scanner.Windows.Common.ViewBase)instance;
            return that.OnNavigatedToCommand;
        }
        private void set_1_ViewBase_OnNavigatedToCommand(object instance, object Value)
        {
            var that = (global::Scanner.Windows.Common.ViewBase)instance;
            that.OnNavigatedToCommand = (global::System.Windows.Input.ICommand)Value;
        }
        private object get_2_CurrentCategoryViewModel_IsBottomAppBarOpen(object instance)
        {
            var that = (global::Scanner.Windows.ViewModels.CurrentCategoryViewModel)instance;
            return that.IsBottomAppBarOpen;
        }
        private void set_2_CurrentCategoryViewModel_IsBottomAppBarOpen(object instance, object Value)
        {
            var that = (global::Scanner.Windows.ViewModels.CurrentCategoryViewModel)instance;
            that.IsBottomAppBarOpen = (global::System.Boolean)Value;
        }
        private object get_3_CurrentCategoryViewModel_IsBottomAppBarSticky(object instance)
        {
            var that = (global::Scanner.Windows.ViewModels.CurrentCategoryViewModel)instance;
            return that.IsBottomAppBarSticky;
        }
        private void set_3_CurrentCategoryViewModel_IsBottomAppBarSticky(object instance, object Value)
        {
            var that = (global::Scanner.Windows.ViewModels.CurrentCategoryViewModel)instance;
            that.IsBottomAppBarSticky = (global::System.Boolean)Value;
        }
        private object get_4_CurrentCategoryViewModel_IsCategoryEmpty(object instance)
        {
            var that = (global::Scanner.Windows.ViewModels.CurrentCategoryViewModel)instance;
            return that.IsCategoryEmpty;
        }
        private void set_4_CurrentCategoryViewModel_IsCategoryEmpty(object instance, object Value)
        {
            var that = (global::Scanner.Windows.ViewModels.CurrentCategoryViewModel)instance;
            that.IsCategoryEmpty = (global::System.Boolean)Value;
        }
        private object get_5_CurrentCategoryViewModel_CurrentCategoryName(object instance)
        {
            var that = (global::Scanner.Windows.ViewModels.CurrentCategoryViewModel)instance;
            return that.CurrentCategoryName;
        }
        private void set_5_CurrentCategoryViewModel_CurrentCategoryName(object instance, object Value)
        {
            var that = (global::Scanner.Windows.ViewModels.CurrentCategoryViewModel)instance;
            that.CurrentCategoryName = (global::System.String)Value;
        }
        private object get_6_CurrentCategoryViewModel_NavigationContext(object instance)
        {
            var that = (global::Scanner.Windows.ViewModels.CurrentCategoryViewModel)instance;
            return that.NavigationContext;
        }
        private object get_7_CurrentCategoryViewModel_SelectedItems(object instance)
        {
            var that = (global::Scanner.Windows.ViewModels.CurrentCategoryViewModel)instance;
            return that.SelectedItems;
        }
        private void set_7_CurrentCategoryViewModel_SelectedItems(object instance, object Value)
        {
            var that = (global::Scanner.Windows.ViewModels.CurrentCategoryViewModel)instance;
            that.SelectedItems = (global::System.Collections.Generic.IList<global::System.Object>)Value;
        }
        private object get_8_CurrentCategoryViewModel_CurrentCategory(object instance)
        {
            var that = (global::Scanner.Windows.ViewModels.CurrentCategoryViewModel)instance;
            return that.CurrentCategory;
        }
        private void set_8_CurrentCategoryViewModel_CurrentCategory(object instance, object Value)
        {
            var that = (global::Scanner.Windows.ViewModels.CurrentCategoryViewModel)instance;
            that.CurrentCategory = (global::Scanner.Models.Category)Value;
        }
        private object get_9_CurrentCategoryViewModel_IsTopAppBarVisible(object instance)
        {
            var that = (global::Scanner.Windows.ViewModels.CurrentCategoryViewModel)instance;
            return that.IsTopAppBarVisible;
        }
        private void set_9_CurrentCategoryViewModel_IsTopAppBarVisible(object instance, object Value)
        {
            var that = (global::Scanner.Windows.ViewModels.CurrentCategoryViewModel)instance;
            that.IsTopAppBarVisible = (global::System.Boolean)Value;
        }
        private object get_10_CurrentCategoryViewModel_BackCommand(object instance)
        {
            var that = (global::Scanner.Windows.ViewModels.CurrentCategoryViewModel)instance;
            return that.BackCommand;
        }
        private object get_11_CurrentCategoryViewModel_DeleteDocumentCommand(object instance)
        {
            var that = (global::Scanner.Windows.ViewModels.CurrentCategoryViewModel)instance;
            return that.DeleteDocumentCommand;
        }
        private object get_12_CurrentCategoryViewModel_DeleteCategoryCommand(object instance)
        {
            var that = (global::Scanner.Windows.ViewModels.CurrentCategoryViewModel)instance;
            return that.DeleteCategoryCommand;
        }
        private object get_13_CurrentCategoryViewModel_MergeDocumentsCommand(object instance)
        {
            var that = (global::Scanner.Windows.ViewModels.CurrentCategoryViewModel)instance;
            return that.MergeDocumentsCommand;
        }
        private object get_14_CurrentCategoryViewModel_RenameCategoryCommand(object instance)
        {
            var that = (global::Scanner.Windows.ViewModels.CurrentCategoryViewModel)instance;
            return that.RenameCategoryCommand;
        }
        private object get_15_CurrentCategoryViewModel_AddDocumentCommand(object instance)
        {
            var that = (global::Scanner.Windows.ViewModels.CurrentCategoryViewModel)instance;
            return that.AddDocumentCommand;
        }
        private object get_16_CurrentCategoryViewModel_SelectionChangedCommand(object instance)
        {
            var that = (global::Scanner.Windows.ViewModels.CurrentCategoryViewModel)instance;
            return that.SelectionChangedCommand;
        }
        private object get_17_CurrentCategoryViewModel_NewScanCommand(object instance)
        {
            var that = (global::Scanner.Windows.ViewModels.CurrentCategoryViewModel)instance;
            return that.NewScanCommand;
        }
        private object get_18_CurrentCategoryViewModel_PinCategoryCommand(object instance)
        {
            var that = (global::Scanner.Windows.ViewModels.CurrentCategoryViewModel)instance;
            return that.PinCategoryCommand;
        }
        private object get_19_CurrentCategoryViewModel_DocumentItemClickCommand(object instance)
        {
            var that = (global::Scanner.Windows.ViewModels.CurrentCategoryViewModel)instance;
            return that.DocumentItemClickCommand;
        }
        private object get_20_ViewModel_OnNavigatedToCommand(object instance)
        {
            var that = (global::Scanner.Windows.ViewModels.ViewModel)instance;
            return that.OnNavigatedToCommand;
        }
        private void set_20_ViewModel_OnNavigatedToCommand(object instance, object Value)
        {
            var that = (global::Scanner.Windows.ViewModels.ViewModel)instance;
            that.OnNavigatedToCommand = (global::GalaSoft.MvvmLight.Command.RelayCommand<global::System.Object>)Value;
        }
        private object get_21_ViewModelBase_IsInDesignMode(object instance)
        {
            var that = (global::GalaSoft.MvvmLight.ViewModelBase)instance;
            return that.IsInDesignMode;
        }
        private object get_22_Interaction_Behaviors(object instance)
        {
            return global::Microsoft.Xaml.Interactivity.Interaction.GetBehaviors((global::Windows.UI.Xaml.DependencyObject)instance);
        }
        private void set_22_Interaction_Behaviors(object instance, object Value)
        {
            global::Microsoft.Xaml.Interactivity.Interaction.SetBehaviors((global::Windows.UI.Xaml.DependencyObject)instance, (global::Microsoft.Xaml.Interactivity.BehaviorCollection)Value);
        }
        private object get_23_GridViewSelectedItemBehavior_SelectedItems(object instance)
        {
            var that = (global::Scanner.Windows.Common.GridViewSelectedItemBehavior)instance;
            return that.SelectedItems;
        }
        private void set_23_GridViewSelectedItemBehavior_SelectedItems(object instance, object Value)
        {
            var that = (global::Scanner.Windows.Common.GridViewSelectedItemBehavior)instance;
            that.SelectedItems = (global::System.Collections.Generic.IList<global::System.Object>)Value;
        }
        private object get_24_Behavior_AssociatedObject(object instance)
        {
            var that = (global::Scanner.Windows.Common.Behavior<global::Windows.UI.Xaml.Controls.GridView>)instance;
            return that.AssociatedObject;
        }
        private void set_24_Behavior_AssociatedObject(object instance, object Value)
        {
            var that = (global::Scanner.Windows.Common.Behavior<global::Windows.UI.Xaml.Controls.GridView>)instance;
            that.AssociatedObject = (global::Windows.UI.Xaml.Controls.GridView)Value;
        }
        private object get_25_EventTriggerBehavior_Actions(object instance)
        {
            var that = (global::Microsoft.Xaml.Interactions.Core.EventTriggerBehavior)instance;
            return that.Actions;
        }
        private object get_26_EventTriggerBehavior_EventName(object instance)
        {
            var that = (global::Microsoft.Xaml.Interactions.Core.EventTriggerBehavior)instance;
            return that.EventName;
        }
        private void set_26_EventTriggerBehavior_EventName(object instance, object Value)
        {
            var that = (global::Microsoft.Xaml.Interactions.Core.EventTriggerBehavior)instance;
            that.EventName = (global::System.String)Value;
        }
        private object get_27_EventTriggerBehavior_SourceObject(object instance)
        {
            var that = (global::Microsoft.Xaml.Interactions.Core.EventTriggerBehavior)instance;
            return that.SourceObject;
        }
        private void set_27_EventTriggerBehavior_SourceObject(object instance, object Value)
        {
            var that = (global::Microsoft.Xaml.Interactions.Core.EventTriggerBehavior)instance;
            that.SourceObject = (global::System.Object)Value;
        }
        private object get_28_EventTriggerBehavior_AssociatedObject(object instance)
        {
            var that = (global::Microsoft.Xaml.Interactions.Core.EventTriggerBehavior)instance;
            return that.AssociatedObject;
        }
        private object get_29_InvokeCommandAction_Command(object instance)
        {
            var that = (global::Microsoft.Xaml.Interactions.Core.InvokeCommandAction)instance;
            return that.Command;
        }
        private void set_29_InvokeCommandAction_Command(object instance, object Value)
        {
            var that = (global::Microsoft.Xaml.Interactions.Core.InvokeCommandAction)instance;
            that.Command = (global::System.Windows.Input.ICommand)Value;
        }
        private object get_30_InvokeCommandAction_InputConverter(object instance)
        {
            var that = (global::Microsoft.Xaml.Interactions.Core.InvokeCommandAction)instance;
            return that.InputConverter;
        }
        private void set_30_InvokeCommandAction_InputConverter(object instance, object Value)
        {
            var that = (global::Microsoft.Xaml.Interactions.Core.InvokeCommandAction)instance;
            that.InputConverter = (global::Windows.UI.Xaml.Data.IValueConverter)Value;
        }
        private object get_31_InvokeCommandAction_CommandParameter(object instance)
        {
            var that = (global::Microsoft.Xaml.Interactions.Core.InvokeCommandAction)instance;
            return that.CommandParameter;
        }
        private void set_31_InvokeCommandAction_CommandParameter(object instance, object Value)
        {
            var that = (global::Microsoft.Xaml.Interactions.Core.InvokeCommandAction)instance;
            that.CommandParameter = (global::System.Object)Value;
        }
        private object get_32_InvokeCommandAction_InputConverterParameter(object instance)
        {
            var that = (global::Microsoft.Xaml.Interactions.Core.InvokeCommandAction)instance;
            return that.InputConverterParameter;
        }
        private void set_32_InvokeCommandAction_InputConverterParameter(object instance, object Value)
        {
            var that = (global::Microsoft.Xaml.Interactions.Core.InvokeCommandAction)instance;
            that.InputConverterParameter = (global::System.Object)Value;
        }
        private object get_33_InvokeCommandAction_InputConverterLanguage(object instance)
        {
            var that = (global::Microsoft.Xaml.Interactions.Core.InvokeCommandAction)instance;
            return that.InputConverterLanguage;
        }
        private void set_33_InvokeCommandAction_InputConverterLanguage(object instance, object Value)
        {
            var that = (global::Microsoft.Xaml.Interactions.Core.InvokeCommandAction)instance;
            that.InputConverterLanguage = (global::System.String)Value;
        }
        private object get_34_DocumentViewModel_CurrentDocument(object instance)
        {
            var that = (global::Scanner.Windows.ViewModels.DocumentViewModel)instance;
            return that.CurrentDocument;
        }
        private void set_34_DocumentViewModel_CurrentDocument(object instance, object Value)
        {
            var that = (global::Scanner.Windows.ViewModels.DocumentViewModel)instance;
            that.CurrentDocument = (global::Scanner.Models.Document)Value;
        }
        private object get_35_DocumentViewModel_CapturedImage(object instance)
        {
            var that = (global::Scanner.Windows.ViewModels.DocumentViewModel)instance;
            return that.CapturedImage;
        }
        private void set_35_DocumentViewModel_CapturedImage(object instance, object Value)
        {
            var that = (global::Scanner.Windows.ViewModels.DocumentViewModel)instance;
            that.CapturedImage = (global::Windows.Storage.StorageFile)Value;
        }
        private object get_36_DocumentViewModel_NavigationContext(object instance)
        {
            var that = (global::Scanner.Windows.ViewModels.DocumentViewModel)instance;
            return that.NavigationContext;
        }
        private void set_36_DocumentViewModel_NavigationContext(object instance, object Value)
        {
            var that = (global::Scanner.Windows.ViewModels.DocumentViewModel)instance;
            that.NavigationContext = (global::Scanner.Windows.ViewModels.NavigationContext)Value;
        }
        private object get_37_DocumentViewModel_CategoryNames(object instance)
        {
            var that = (global::Scanner.Windows.ViewModels.DocumentViewModel)instance;
            return that.CategoryNames;
        }
        private void set_37_DocumentViewModel_CategoryNames(object instance, object Value)
        {
            var that = (global::Scanner.Windows.ViewModels.DocumentViewModel)instance;
            that.CategoryNames = (global::System.Collections.ObjectModel.ObservableCollection<global::System.String>)Value;
        }
        private object get_38_DocumentViewModel_SelectedCategoryName(object instance)
        {
            var that = (global::Scanner.Windows.ViewModels.DocumentViewModel)instance;
            return that.SelectedCategoryName;
        }
        private void set_38_DocumentViewModel_SelectedCategoryName(object instance, object Value)
        {
            var that = (global::Scanner.Windows.ViewModels.DocumentViewModel)instance;
            that.SelectedCategoryName = (global::System.String)Value;
        }
        private object get_39_DocumentViewModel_SelectedItems(object instance)
        {
            var that = (global::Scanner.Windows.ViewModels.DocumentViewModel)instance;
            return that.SelectedItems;
        }
        private void set_39_DocumentViewModel_SelectedItems(object instance, object Value)
        {
            var that = (global::Scanner.Windows.ViewModels.DocumentViewModel)instance;
            that.SelectedItems = (global::System.Collections.Generic.IList<global::System.Object>)Value;
        }
        private object get_40_DocumentViewModel_IsBottomAppBarOpen(object instance)
        {
            var that = (global::Scanner.Windows.ViewModels.DocumentViewModel)instance;
            return that.IsBottomAppBarOpen;
        }
        private void set_40_DocumentViewModel_IsBottomAppBarOpen(object instance, object Value)
        {
            var that = (global::Scanner.Windows.ViewModels.DocumentViewModel)instance;
            that.IsBottomAppBarOpen = (global::System.Boolean)Value;
        }
        private object get_41_DocumentViewModel_IsBottomAppBarSticky(object instance)
        {
            var that = (global::Scanner.Windows.ViewModels.DocumentViewModel)instance;
            return that.IsBottomAppBarSticky;
        }
        private void set_41_DocumentViewModel_IsBottomAppBarSticky(object instance, object Value)
        {
            var that = (global::Scanner.Windows.ViewModels.DocumentViewModel)instance;
            that.IsBottomAppBarSticky = (global::System.Boolean)Value;
        }
        private object get_42_DocumentViewModel_DeleteCurrentDocumentCommand(object instance)
        {
            var that = (global::Scanner.Windows.ViewModels.DocumentViewModel)instance;
            return that.DeleteCurrentDocumentCommand;
        }
        private object get_43_DocumentViewModel_BackCommand(object instance)
        {
            var that = (global::Scanner.Windows.ViewModels.DocumentViewModel)instance;
            return that.BackCommand;
        }
        private object get_44_DocumentViewModel_AddPageCommand(object instance)
        {
            var that = (global::Scanner.Windows.ViewModels.DocumentViewModel)instance;
            return that.AddPageCommand;
        }
        private object get_45_DocumentViewModel_PageItemClickCommand(object instance)
        {
            var that = (global::Scanner.Windows.ViewModels.DocumentViewModel)instance;
            return that.PageItemClickCommand;
        }
        private object get_46_DocumentViewModel_AddFromGalleryCommand(object instance)
        {
            var that = (global::Scanner.Windows.ViewModels.DocumentViewModel)instance;
            return that.AddFromGalleryCommand;
        }
        private object get_47_DocumentViewModel_RenameDocumentCommand(object instance)
        {
            var that = (global::Scanner.Windows.ViewModels.DocumentViewModel)instance;
            return that.RenameDocumentCommand;
        }
        private object get_48_DocumentViewModel_LoadCategoryNamesCommand(object instance)
        {
            var that = (global::Scanner.Windows.ViewModels.DocumentViewModel)instance;
            return that.LoadCategoryNamesCommand;
        }
        private object get_49_DocumentViewModel_MoveToCategoryCommand(object instance)
        {
            var that = (global::Scanner.Windows.ViewModels.DocumentViewModel)instance;
            return that.MoveToCategoryCommand;
        }
        private object get_50_DocumentViewModel_PinDocumentCommand(object instance)
        {
            var that = (global::Scanner.Windows.ViewModels.DocumentViewModel)instance;
            return that.PinDocumentCommand;
        }
        private object get_51_DocumentViewModel_MergePagesCommand(object instance)
        {
            var that = (global::Scanner.Windows.ViewModels.DocumentViewModel)instance;
            return that.MergePagesCommand;
        }
        private object get_52_DocumentViewModel_DeletePagesCommand(object instance)
        {
            var that = (global::Scanner.Windows.ViewModels.DocumentViewModel)instance;
            return that.DeletePagesCommand;
        }
        private object get_53_DocumentViewModel_SelectionChangedCommand(object instance)
        {
            var that = (global::Scanner.Windows.ViewModels.DocumentViewModel)instance;
            return that.SelectionChangedCommand;
        }
        private object get_54_MainViewModel_NavigateCommand(object instance)
        {
            var that = (global::Scanner.Windows.ViewModels.MainViewModel)instance;
            return that.NavigateCommand;
        }
        private object get_55_MainViewModel_PhotoCommand(object instance)
        {
            var that = (global::Scanner.Windows.ViewModels.MainViewModel)instance;
            return that.PhotoCommand;
        }
        private object get_56_MainViewModel_ImageProcessCommand(object instance)
        {
            var that = (global::Scanner.Windows.ViewModels.MainViewModel)instance;
            return that.ImageProcessCommand;
        }
        private object get_57_MainViewModel_ImportCommand(object instance)
        {
            var that = (global::Scanner.Windows.ViewModels.MainViewModel)instance;
            return that.ImportCommand;
        }
        private object get_58_MainViewModel_GetAllDocumentsCommand(object instance)
        {
            var that = (global::Scanner.Windows.ViewModels.MainViewModel)instance;
            return that.GetAllDocumentsCommand;
        }
        private object get_59_MainViewModel_ShowNewCategoryDialogCommand(object instance)
        {
            var that = (global::Scanner.Windows.ViewModels.MainViewModel)instance;
            return that.ShowNewCategoryDialogCommand;
        }
        private object get_60_MainViewModel_AddNewCategoryCommand(object instance)
        {
            var that = (global::Scanner.Windows.ViewModels.MainViewModel)instance;
            return that.AddNewCategoryCommand;
        }
        private object get_61_MainViewModel_BatchModeCommand(object instance)
        {
            var that = (global::Scanner.Windows.ViewModels.MainViewModel)instance;
            return that.BatchModeCommand;
        }
        private object get_62_MainViewModel_AllCategoryDocumentsCommand(object instance)
        {
            var that = (global::Scanner.Windows.ViewModels.MainViewModel)instance;
            return that.AllCategoryDocumentsCommand;
        }
        private object get_63_MainViewModel_AllDocumentsCommand(object instance)
        {
            var that = (global::Scanner.Windows.ViewModels.MainViewModel)instance;
            return that.AllDocumentsCommand;
        }
        private object get_64_MainViewModel_DocumentItemClickCommand(object instance)
        {
            var that = (global::Scanner.Windows.ViewModels.MainViewModel)instance;
            return that.DocumentItemClickCommand;
        }
        private object get_65_MainViewModel_LoadDataCommand(object instance)
        {
            var that = (global::Scanner.Windows.ViewModels.MainViewModel)instance;
            return that.LoadDataCommand;
        }
        private object get_66_MainViewModel_SortItemsCommand(object instance)
        {
            var that = (global::Scanner.Windows.ViewModels.MainViewModel)instance;
            return that.SortItemsCommand;
        }
        private object get_67_MainViewModel_NewCategoryString(object instance)
        {
            var that = (global::Scanner.Windows.ViewModels.MainViewModel)instance;
            return that.NewCategoryString;
        }
        private void set_67_MainViewModel_NewCategoryString(object instance, object Value)
        {
            var that = (global::Scanner.Windows.ViewModels.MainViewModel)instance;
            that.NewCategoryString = (global::System.String)Value;
        }
        private object get_68_MainViewModel_Categories(object instance)
        {
            var that = (global::Scanner.Windows.ViewModels.MainViewModel)instance;
            return that.Categories;
        }
        private void set_68_MainViewModel_Categories(object instance, object Value)
        {
            var that = (global::Scanner.Windows.ViewModels.MainViewModel)instance;
            that.Categories = (global::System.Collections.ObjectModel.ObservableCollection<global::Scanner.Models.Category>)Value;
        }
        private object get_69_Category_CategoryDocuments(object instance)
        {
            var that = (global::Scanner.Models.Category)instance;
            return that.CategoryDocuments;
        }
        private void set_69_Category_CategoryDocuments(object instance, object Value)
        {
            var that = (global::Scanner.Models.Category)instance;
            that.CategoryDocuments = (global::System.Collections.ObjectModel.ObservableCollection<global::Scanner.Models.Document>)Value;
        }
        private object get_70_Document_Pages(object instance)
        {
            var that = (global::Scanner.Models.Document)instance;
            return that.Pages;
        }
        private void set_70_Document_Pages(object instance, object Value)
        {
            var that = (global::Scanner.Models.Document)instance;
            that.Pages = (global::System.Collections.ObjectModel.ObservableCollection<global::Scanner.Models.Page>)Value;
        }
        private object get_71_Page_ID(object instance)
        {
            var that = (global::Scanner.Models.Page)instance;
            return that.ID;
        }
        private void set_71_Page_ID(object instance, object Value)
        {
            var that = (global::Scanner.Models.Page)instance;
            that.ID = (global::System.Guid)Value;
        }
        private object get_72_Page_PageName(object instance)
        {
            var that = (global::Scanner.Models.Page)instance;
            return that.PageName;
        }
        private void set_72_Page_PageName(object instance, object Value)
        {
            var that = (global::Scanner.Models.Page)instance;
            that.PageName = (global::System.String)Value;
        }
        private object get_73_Page_DocumentId(object instance)
        {
            var that = (global::Scanner.Models.Page)instance;
            return that.DocumentId;
        }
        private void set_73_Page_DocumentId(object instance, object Value)
        {
            var that = (global::Scanner.Models.Page)instance;
            that.DocumentId = (global::System.Guid)Value;
        }
        private object get_74_Page_OriginalFilePath(object instance)
        {
            var that = (global::Scanner.Models.Page)instance;
            return that.OriginalFilePath;
        }
        private void set_74_Page_OriginalFilePath(object instance, object Value)
        {
            var that = (global::Scanner.Models.Page)instance;
            that.OriginalFilePath = (global::System.String)Value;
        }
        private object get_75_Page_ProcessedFilePath(object instance)
        {
            var that = (global::Scanner.Models.Page)instance;
            return that.ProcessedFilePath;
        }
        private void set_75_Page_ProcessedFilePath(object instance, object Value)
        {
            var that = (global::Scanner.Models.Page)instance;
            that.ProcessedFilePath = (global::System.String)Value;
        }
        private object get_76_Page_Number(object instance)
        {
            var that = (global::Scanner.Models.Page)instance;
            return that.Number;
        }
        private void set_76_Page_Number(object instance, object Value)
        {
            var that = (global::Scanner.Models.Page)instance;
            that.Number = (global::System.Int32)Value;
        }
        private object get_77_Page_Size(object instance)
        {
            var that = (global::Scanner.Models.Page)instance;
            return that.Size;
        }
        private void set_77_Page_Size(object instance, object Value)
        {
            var that = (global::Scanner.Models.Page)instance;
            that.Size = (global::System.UInt64)Value;
        }
        private object get_78_Page_IsFromCamera(object instance)
        {
            var that = (global::Scanner.Models.Page)instance;
            return that.IsFromCamera;
        }
        private void set_78_Page_IsFromCamera(object instance, object Value)
        {
            var that = (global::Scanner.Models.Page)instance;
            that.IsFromCamera = (global::System.Boolean)Value;
        }
        private object get_79_Page_MbSize(object instance)
        {
            var that = (global::Scanner.Models.Page)instance;
            return that.MbSize;
        }
        private object get_80_Document_DocumentName(object instance)
        {
            var that = (global::Scanner.Models.Document)instance;
            return that.DocumentName;
        }
        private void set_80_Document_DocumentName(object instance, object Value)
        {
            var that = (global::Scanner.Models.Document)instance;
            that.DocumentName = (global::System.String)Value;
        }
        private object get_81_Document_DateCreated(object instance)
        {
            var that = (global::Scanner.Models.Document)instance;
            return that.DateCreated;
        }
        private void set_81_Document_DateCreated(object instance, object Value)
        {
            var that = (global::Scanner.Models.Document)instance;
            that.DateCreated = (global::System.String)Value;
        }
        private object get_82_Document_TimeCreated(object instance)
        {
            var that = (global::Scanner.Models.Document)instance;
            return that.TimeCreated;
        }
        private void set_82_Document_TimeCreated(object instance, object Value)
        {
            var that = (global::Scanner.Models.Document)instance;
            that.TimeCreated = (global::System.String)Value;
        }
        private object get_83_Document_DocumentSize(object instance)
        {
            var that = (global::Scanner.Models.Document)instance;
            return that.DocumentSize;
        }
        private void set_83_Document_DocumentSize(object instance, object Value)
        {
            var that = (global::Scanner.Models.Document)instance;
            that.DocumentSize = (global::System.Double)Value;
        }
        private object get_84_Document_DocumentPageCounter(object instance)
        {
            var that = (global::Scanner.Models.Document)instance;
            return that.DocumentPageCounter;
        }
        private object get_85_Document_DocumentCategory(object instance)
        {
            var that = (global::Scanner.Models.Document)instance;
            return that.DocumentCategory;
        }
        private void set_85_Document_DocumentCategory(object instance, object Value)
        {
            var that = (global::Scanner.Models.Document)instance;
            that.DocumentCategory = (global::System.String)Value;
        }
        private object get_86_Document_ID(object instance)
        {
            var that = (global::Scanner.Models.Document)instance;
            return that.ID;
        }
        private void set_86_Document_ID(object instance, object Value)
        {
            var that = (global::Scanner.Models.Document)instance;
            that.ID = (global::System.Guid)Value;
        }
        private object get_87_Document_IsPinned(object instance)
        {
            var that = (global::Scanner.Models.Document)instance;
            return that.IsPinned;
        }
        private void set_87_Document_IsPinned(object instance, object Value)
        {
            var that = (global::Scanner.Models.Document)instance;
            that.IsPinned = (global::System.Boolean)Value;
        }
        private object get_88_Category_IsPinned(object instance)
        {
            var that = (global::Scanner.Models.Category)instance;
            return that.IsPinned;
        }
        private void set_88_Category_IsPinned(object instance, object Value)
        {
            var that = (global::Scanner.Models.Category)instance;
            that.IsPinned = (global::System.Boolean)Value;
        }
        private object get_89_Category_CategoryName(object instance)
        {
            var that = (global::Scanner.Models.Category)instance;
            return that.CategoryName;
        }
        private void set_89_Category_CategoryName(object instance, object Value)
        {
            var that = (global::Scanner.Models.Category)instance;
            that.CategoryName = (global::System.String)Value;
        }
        private object get_90_Category_ID(object instance)
        {
            var that = (global::Scanner.Models.Category)instance;
            return that.ID;
        }
        private void set_90_Category_ID(object instance, object Value)
        {
            var that = (global::Scanner.Models.Category)instance;
            that.ID = (global::System.Guid)Value;
        }
        private object get_91_MainViewModel_NavigationContext(object instance)
        {
            var that = (global::Scanner.Windows.ViewModels.MainViewModel)instance;
            return that.NavigationContext;
        }
        private object get_92_MainViewModel_ComboBoxSelectedValue(object instance)
        {
            var that = (global::Scanner.Windows.ViewModels.MainViewModel)instance;
            return that.ComboBoxSelectedValue;
        }
        private void set_92_MainViewModel_ComboBoxSelectedValue(object instance, object Value)
        {
            var that = (global::Scanner.Windows.ViewModels.MainViewModel)instance;
            that.ComboBoxSelectedValue = (global::System.String)Value;
        }
        private object get_93_MainViewModel_IsFlyoutOpen(object instance)
        {
            var that = (global::Scanner.Windows.ViewModels.MainViewModel)instance;
            return that.IsFlyoutOpen;
        }
        private void set_93_MainViewModel_IsFlyoutOpen(object instance, object Value)
        {
            var that = (global::Scanner.Windows.ViewModels.MainViewModel)instance;
            that.IsFlyoutOpen = (global::System.Boolean)Value;
        }
        private object get_94_FlyoutExtensions_IsOpen(object instance)
        {
            return global::Scanner.Core.ControlExtensions.FlyoutExtensions.GetIsOpen((global::Windows.UI.Xaml.DependencyObject)instance);
        }
        private void set_94_FlyoutExtensions_IsOpen(object instance, object Value)
        {
            global::Scanner.Core.ControlExtensions.FlyoutExtensions.SetIsOpen((global::Windows.UI.Xaml.DependencyObject)instance, (global::System.Boolean)Value);
        }
        private object get_95_FlyoutExtensions_Parent(object instance)
        {
            return global::Scanner.Core.ControlExtensions.FlyoutExtensions.GetParent((global::Windows.UI.Xaml.DependencyObject)instance);
        }
        private void set_95_FlyoutExtensions_Parent(object instance, object Value)
        {
            global::Scanner.Core.ControlExtensions.FlyoutExtensions.SetParent((global::Windows.UI.Xaml.DependencyObject)instance, (global::Windows.UI.Xaml.Controls.Button)Value);
        }
        private object get_96_CustomControl_CurrentPosition(object instance)
        {
            var that = (global::Scanner.Windows.Views.PhotoView.CustomControl)instance;
            return that.CurrentPosition;
        }
        private void set_96_CustomControl_CurrentPosition(object instance, object Value)
        {
            var that = (global::Scanner.Windows.Views.PhotoView.CustomControl)instance;
            that.CurrentPosition = (global::Windows.Foundation.Point)Value;
        }
        private object get_97_ImageExtensions_File(object instance)
        {
            return global::Scanner.Core.ControlExtentions.ImageExtensions.GetFile((global::Windows.UI.Xaml.UIElement)instance);
        }
        private void set_97_ImageExtensions_File(object instance, object Value)
        {
            global::Scanner.Core.ControlExtentions.ImageExtensions.SetFile((global::Windows.UI.Xaml.UIElement)instance, (global::Windows.Storage.StorageFile)Value);
        }
        private object get_98_CropControl_ImageFile(object instance)
        {
            var that = (global::Scanner.Windows.Views.PhotoView.CropControl)instance;
            return that.ImageFile;
        }
        private void set_98_CropControl_ImageFile(object instance, object Value)
        {
            var that = (global::Scanner.Windows.Views.PhotoView.CropControl)instance;
            that.ImageFile = (global::Windows.Storage.StorageFile)Value;
        }
        private object get_99_CropControl_LeftTopPosition(object instance)
        {
            var that = (global::Scanner.Windows.Views.PhotoView.CropControl)instance;
            return that.LeftTopPosition;
        }
        private void set_99_CropControl_LeftTopPosition(object instance, object Value)
        {
            var that = (global::Scanner.Windows.Views.PhotoView.CropControl)instance;
            that.LeftTopPosition = (global::Windows.Foundation.Point)Value;
        }
        private object get_100_CropControl_RightTopPosition(object instance)
        {
            var that = (global::Scanner.Windows.Views.PhotoView.CropControl)instance;
            return that.RightTopPosition;
        }
        private void set_100_CropControl_RightTopPosition(object instance, object Value)
        {
            var that = (global::Scanner.Windows.Views.PhotoView.CropControl)instance;
            that.RightTopPosition = (global::Windows.Foundation.Point)Value;
        }
        private object get_101_CropControl_LeftBottomPosition(object instance)
        {
            var that = (global::Scanner.Windows.Views.PhotoView.CropControl)instance;
            return that.LeftBottomPosition;
        }
        private void set_101_CropControl_LeftBottomPosition(object instance, object Value)
        {
            var that = (global::Scanner.Windows.Views.PhotoView.CropControl)instance;
            that.LeftBottomPosition = (global::Windows.Foundation.Point)Value;
        }
        private object get_102_CropControl_RightBottomPosition(object instance)
        {
            var that = (global::Scanner.Windows.Views.PhotoView.CropControl)instance;
            return that.RightBottomPosition;
        }
        private void set_102_CropControl_RightBottomPosition(object instance, object Value)
        {
            var that = (global::Scanner.Windows.Views.PhotoView.CropControl)instance;
            that.RightBottomPosition = (global::Windows.Foundation.Point)Value;
        }
        private object get_103_CropControl_LeftTopX(object instance)
        {
            var that = (global::Scanner.Windows.Views.PhotoView.CropControl)instance;
            return that.LeftTopX;
        }
        private void set_103_CropControl_LeftTopX(object instance, object Value)
        {
            var that = (global::Scanner.Windows.Views.PhotoView.CropControl)instance;
            that.LeftTopX = (global::System.Double)Value;
        }
        private object get_104_CropControl_LeftTopY(object instance)
        {
            var that = (global::Scanner.Windows.Views.PhotoView.CropControl)instance;
            return that.LeftTopY;
        }
        private void set_104_CropControl_LeftTopY(object instance, object Value)
        {
            var that = (global::Scanner.Windows.Views.PhotoView.CropControl)instance;
            that.LeftTopY = (global::System.Double)Value;
        }
        private object get_105_CropControl_RightTopX(object instance)
        {
            var that = (global::Scanner.Windows.Views.PhotoView.CropControl)instance;
            return that.RightTopX;
        }
        private void set_105_CropControl_RightTopX(object instance, object Value)
        {
            var that = (global::Scanner.Windows.Views.PhotoView.CropControl)instance;
            that.RightTopX = (global::System.Double)Value;
        }
        private object get_106_CropControl_RightTopY(object instance)
        {
            var that = (global::Scanner.Windows.Views.PhotoView.CropControl)instance;
            return that.RightTopY;
        }
        private void set_106_CropControl_RightTopY(object instance, object Value)
        {
            var that = (global::Scanner.Windows.Views.PhotoView.CropControl)instance;
            that.RightTopY = (global::System.Double)Value;
        }
        private object get_107_CropControl_LeftBottomX(object instance)
        {
            var that = (global::Scanner.Windows.Views.PhotoView.CropControl)instance;
            return that.LeftBottomX;
        }
        private void set_107_CropControl_LeftBottomX(object instance, object Value)
        {
            var that = (global::Scanner.Windows.Views.PhotoView.CropControl)instance;
            that.LeftBottomX = (global::System.Double)Value;
        }
        private object get_108_CropControl_LeftBottomY(object instance)
        {
            var that = (global::Scanner.Windows.Views.PhotoView.CropControl)instance;
            return that.LeftBottomY;
        }
        private void set_108_CropControl_LeftBottomY(object instance, object Value)
        {
            var that = (global::Scanner.Windows.Views.PhotoView.CropControl)instance;
            that.LeftBottomY = (global::System.Double)Value;
        }
        private object get_109_CropControl_RightBottomY(object instance)
        {
            var that = (global::Scanner.Windows.Views.PhotoView.CropControl)instance;
            return that.RightBottomY;
        }
        private void set_109_CropControl_RightBottomY(object instance, object Value)
        {
            var that = (global::Scanner.Windows.Views.PhotoView.CropControl)instance;
            that.RightBottomY = (global::System.Double)Value;
        }
        private object get_110_CropControl_RightBottomX(object instance)
        {
            var that = (global::Scanner.Windows.Views.PhotoView.CropControl)instance;
            return that.RightBottomX;
        }
        private void set_110_CropControl_RightBottomX(object instance, object Value)
        {
            var that = (global::Scanner.Windows.Views.PhotoView.CropControl)instance;
            that.RightBottomX = (global::System.Double)Value;
        }
        private object get_111_CropControl_CropActualWidth(object instance)
        {
            var that = (global::Scanner.Windows.Views.PhotoView.CropControl)instance;
            return that.CropActualWidth;
        }
        private void set_111_CropControl_CropActualWidth(object instance, object Value)
        {
            var that = (global::Scanner.Windows.Views.PhotoView.CropControl)instance;
            that.CropActualWidth = (global::System.Double)Value;
        }
        private object get_112_CropControl_CropActualHeight(object instance)
        {
            var that = (global::Scanner.Windows.Views.PhotoView.CropControl)instance;
            return that.CropActualHeight;
        }
        private void set_112_CropControl_CropActualHeight(object instance, object Value)
        {
            var that = (global::Scanner.Windows.Views.PhotoView.CropControl)instance;
            that.CropActualHeight = (global::System.Double)Value;
        }
        private object get_113_PhotoViewModel_NavigationContext(object instance)
        {
            var that = (global::Scanner.Windows.ViewModels.PhotoViewModel)instance;
            return that.NavigationContext;
        }
        private void set_113_PhotoViewModel_NavigationContext(object instance, object Value)
        {
            var that = (global::Scanner.Windows.ViewModels.PhotoViewModel)instance;
            that.NavigationContext = (global::Scanner.Windows.ViewModels.NavigationContext)Value;
        }
        private object get_114_PhotoViewModel_CurrentCapturedData(object instance)
        {
            var that = (global::Scanner.Windows.ViewModels.PhotoViewModel)instance;
            return that.CurrentCapturedData;
        }
        private void set_114_PhotoViewModel_CurrentCapturedData(object instance, object Value)
        {
            var that = (global::Scanner.Windows.ViewModels.PhotoViewModel)instance;
            that.CurrentCapturedData = (global::Scanner.Models.PhotoCapturedData)Value;
        }
        private object get_115_PhotoViewModel_PageToProcces(object instance)
        {
            var that = (global::Scanner.Windows.ViewModels.PhotoViewModel)instance;
            return that.PageToProcces;
        }
        private void set_115_PhotoViewModel_PageToProcces(object instance, object Value)
        {
            var that = (global::Scanner.Windows.ViewModels.PhotoViewModel)instance;
            that.PageToProcces = (global::Scanner.Models.Page)Value;
        }
        private object get_116_PhotoViewModel_CapturedImage(object instance)
        {
            var that = (global::Scanner.Windows.ViewModels.PhotoViewModel)instance;
            return that.CapturedImage;
        }
        private void set_116_PhotoViewModel_CapturedImage(object instance, object Value)
        {
            var that = (global::Scanner.Windows.ViewModels.PhotoViewModel)instance;
            that.CapturedImage = (global::Windows.Storage.StorageFile)Value;
        }
        private object get_117_PhotoViewModel_RotationAngle(object instance)
        {
            var that = (global::Scanner.Windows.ViewModels.PhotoViewModel)instance;
            return that.RotationAngle;
        }
        private void set_117_PhotoViewModel_RotationAngle(object instance, object Value)
        {
            var that = (global::Scanner.Windows.ViewModels.PhotoViewModel)instance;
            that.RotationAngle = (global::System.Double)Value;
        }
        private object get_118_PhotoViewModel_Points(object instance)
        {
            var that = (global::Scanner.Windows.ViewModels.PhotoViewModel)instance;
            return that.Points;
        }
        private void set_118_PhotoViewModel_Points(object instance, object Value)
        {
            var that = (global::Scanner.Windows.ViewModels.PhotoViewModel)instance;
            that.Points = (global::System.Collections.ObjectModel.ObservableCollection<global::System.Double>)Value;
        }
        private object get_119_PhotoViewModel_PointsData(object instance)
        {
            var that = (global::Scanner.Windows.ViewModels.PhotoViewModel)instance;
            return that.PointsData;
        }
        private void set_119_PhotoViewModel_PointsData(object instance, object Value)
        {
            var that = (global::Scanner.Windows.ViewModels.PhotoViewModel)instance;
            that.PointsData = (global::Scanner.Models.CropControlPointsData)Value;
        }
        private object get_120_PhotoViewModel_CropControlWidth(object instance)
        {
            var that = (global::Scanner.Windows.ViewModels.PhotoViewModel)instance;
            return that.CropControlWidth;
        }
        private void set_120_PhotoViewModel_CropControlWidth(object instance, object Value)
        {
            var that = (global::Scanner.Windows.ViewModels.PhotoViewModel)instance;
            that.CropControlWidth = (global::System.Double)Value;
        }
        private object get_121_PhotoViewModel_CropControlHeight(object instance)
        {
            var that = (global::Scanner.Windows.ViewModels.PhotoViewModel)instance;
            return that.CropControlHeight;
        }
        private void set_121_PhotoViewModel_CropControlHeight(object instance, object Value)
        {
            var that = (global::Scanner.Windows.ViewModels.PhotoViewModel)instance;
            that.CropControlHeight = (global::System.Double)Value;
        }
        private object get_122_PhotoViewModel_RotateRightCommand(object instance)
        {
            var that = (global::Scanner.Windows.ViewModels.PhotoViewModel)instance;
            return that.RotateRightCommand;
        }
        private object get_123_PhotoViewModel_RotateLeftCommand(object instance)
        {
            var that = (global::Scanner.Windows.ViewModels.PhotoViewModel)instance;
            return that.RotateLeftCommand;
        }
        private object get_124_PhotoViewModel_ProccesCommand(object instance)
        {
            var that = (global::Scanner.Windows.ViewModels.PhotoViewModel)instance;
            return that.ProccesCommand;
        }
        private object get_125_PhotoViewModel_BackCommand(object instance)
        {
            var that = (global::Scanner.Windows.ViewModels.PhotoViewModel)instance;
            return that.BackCommand;
        }
        private object get_126_PhotoViewModel_DeletePageCommand(object instance)
        {
            var that = (global::Scanner.Windows.ViewModels.PhotoViewModel)instance;
            return that.DeletePageCommand;
        }
        private object get_127_PhotoViewModel_ResetEdgesCommand(object instance)
        {
            var that = (global::Scanner.Windows.ViewModels.PhotoViewModel)instance;
            return that.ResetEdgesCommand;
        }
        private object get_128_PhotoViewModel_LoadPointPresetsCommand(object instance)
        {
            var that = (global::Scanner.Windows.ViewModels.PhotoViewModel)instance;
            return that.LoadPointPresetsCommand;
        }
        private object get_129_PostProccesViewModel_CurrentDocument(object instance)
        {
            var that = (global::Scanner.Windows.ViewModels.PostProccesViewModel)instance;
            return that.CurrentDocument;
        }
        private void set_129_PostProccesViewModel_CurrentDocument(object instance, object Value)
        {
            var that = (global::Scanner.Windows.ViewModels.PostProccesViewModel)instance;
            that.CurrentDocument = (global::Scanner.Models.Document)Value;
        }
        private object get_130_PostProccesViewModel_NavigationContext(object instance)
        {
            var that = (global::Scanner.Windows.ViewModels.PostProccesViewModel)instance;
            return that.NavigationContext;
        }
        private object get_131_PostProccesViewModel_CapturedImage(object instance)
        {
            var that = (global::Scanner.Windows.ViewModels.PostProccesViewModel)instance;
            return that.CapturedImage;
        }
        private void set_131_PostProccesViewModel_CapturedImage(object instance, object Value)
        {
            var that = (global::Scanner.Windows.ViewModels.PostProccesViewModel)instance;
            that.CapturedImage = (global::Windows.Storage.StorageFile)Value;
        }
        private object get_132_PostProccesViewModel_SelectedPage(object instance)
        {
            var that = (global::Scanner.Windows.ViewModels.PostProccesViewModel)instance;
            return that.SelectedPage;
        }
        private void set_132_PostProccesViewModel_SelectedPage(object instance, object Value)
        {
            var that = (global::Scanner.Windows.ViewModels.PostProccesViewModel)instance;
            that.SelectedPage = (global::Scanner.Models.Page)Value;
        }
        private object get_133_PostProccesViewModel_BackCommand(object instance)
        {
            var that = (global::Scanner.Windows.ViewModels.PostProccesViewModel)instance;
            return that.BackCommand;
        }
        private object get_134_PostProccesViewModel_RescanCommand(object instance)
        {
            var that = (global::Scanner.Windows.ViewModels.PostProccesViewModel)instance;
            return that.RescanCommand;
        }
        private object get_135_PostProccesViewModel_FlipViewSelectionChangedCommand(object instance)
        {
            var that = (global::Scanner.Windows.ViewModels.PostProccesViewModel)instance;
            return that.FlipViewSelectionChangedCommand;
        }
        private object get_136_PostProccesViewModel_DeletePageCommand(object instance)
        {
            var that = (global::Scanner.Windows.ViewModels.PostProccesViewModel)instance;
            return that.DeletePageCommand;
        }
        private object get_137_PostProccesViewModel_SelectFilterCommand(object instance)
        {
            var that = (global::Scanner.Windows.ViewModels.PostProccesViewModel)instance;
            return that.SelectFilterCommand;
        }
        private object get_138_PostProccesViewModel_UndoRedoCommand(object instance)
        {
            var that = (global::Scanner.Windows.ViewModels.PostProccesViewModel)instance;
            return that.UndoRedoCommand;
        }

        private global::Windows.UI.Xaml.Markup.IXamlMember CreateXamlMember(string longMemberName)
        {
            global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlMember xamlMember = null;
            global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlUserType userType;

            switch (longMemberName)
            {
            case "Scanner.Windows.ViewModels.ViewModelLocator.NavigationContext":
                userType = (global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Scanner.Windows.ViewModels.ViewModelLocator");
                xamlMember = new global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlMember(this, "NavigationContext", "Scanner.Windows.ViewModels.NavigationContext");
                xamlMember.Getter = get_0_ViewModelLocator_NavigationContext;
                xamlMember.SetIsReadOnly();
                break;
            case "Scanner.Windows.Common.ViewBase.OnNavigatedToCommand":
                userType = (global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Scanner.Windows.Common.ViewBase");
                xamlMember = new global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlMember(this, "OnNavigatedToCommand", "System.Windows.Input.ICommand");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_1_ViewBase_OnNavigatedToCommand;
                xamlMember.Setter = set_1_ViewBase_OnNavigatedToCommand;
                break;
            case "Scanner.Windows.ViewModels.CurrentCategoryViewModel.IsBottomAppBarOpen":
                userType = (global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Scanner.Windows.ViewModels.CurrentCategoryViewModel");
                xamlMember = new global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlMember(this, "IsBottomAppBarOpen", "Boolean");
                xamlMember.Getter = get_2_CurrentCategoryViewModel_IsBottomAppBarOpen;
                xamlMember.Setter = set_2_CurrentCategoryViewModel_IsBottomAppBarOpen;
                break;
            case "Scanner.Windows.ViewModels.CurrentCategoryViewModel.IsBottomAppBarSticky":
                userType = (global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Scanner.Windows.ViewModels.CurrentCategoryViewModel");
                xamlMember = new global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlMember(this, "IsBottomAppBarSticky", "Boolean");
                xamlMember.Getter = get_3_CurrentCategoryViewModel_IsBottomAppBarSticky;
                xamlMember.Setter = set_3_CurrentCategoryViewModel_IsBottomAppBarSticky;
                break;
            case "Scanner.Windows.ViewModels.CurrentCategoryViewModel.IsCategoryEmpty":
                userType = (global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Scanner.Windows.ViewModels.CurrentCategoryViewModel");
                xamlMember = new global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlMember(this, "IsCategoryEmpty", "Boolean");
                xamlMember.Getter = get_4_CurrentCategoryViewModel_IsCategoryEmpty;
                xamlMember.Setter = set_4_CurrentCategoryViewModel_IsCategoryEmpty;
                break;
            case "Scanner.Windows.ViewModels.CurrentCategoryViewModel.CurrentCategoryName":
                userType = (global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Scanner.Windows.ViewModels.CurrentCategoryViewModel");
                xamlMember = new global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlMember(this, "CurrentCategoryName", "String");
                xamlMember.Getter = get_5_CurrentCategoryViewModel_CurrentCategoryName;
                xamlMember.Setter = set_5_CurrentCategoryViewModel_CurrentCategoryName;
                break;
            case "Scanner.Windows.ViewModels.CurrentCategoryViewModel.NavigationContext":
                userType = (global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Scanner.Windows.ViewModels.CurrentCategoryViewModel");
                xamlMember = new global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlMember(this, "NavigationContext", "Scanner.Windows.ViewModels.NavigationContext");
                xamlMember.Getter = get_6_CurrentCategoryViewModel_NavigationContext;
                xamlMember.SetIsReadOnly();
                break;
            case "Scanner.Windows.ViewModels.CurrentCategoryViewModel.SelectedItems":
                userType = (global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Scanner.Windows.ViewModels.CurrentCategoryViewModel");
                xamlMember = new global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlMember(this, "SelectedItems", "System.Collections.Generic.IList`1<Object>");
                xamlMember.Getter = get_7_CurrentCategoryViewModel_SelectedItems;
                xamlMember.Setter = set_7_CurrentCategoryViewModel_SelectedItems;
                break;
            case "Scanner.Windows.ViewModels.CurrentCategoryViewModel.CurrentCategory":
                userType = (global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Scanner.Windows.ViewModels.CurrentCategoryViewModel");
                xamlMember = new global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlMember(this, "CurrentCategory", "Scanner.Models.Category");
                xamlMember.Getter = get_8_CurrentCategoryViewModel_CurrentCategory;
                xamlMember.Setter = set_8_CurrentCategoryViewModel_CurrentCategory;
                break;
            case "Scanner.Windows.ViewModels.CurrentCategoryViewModel.IsTopAppBarVisible":
                userType = (global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Scanner.Windows.ViewModels.CurrentCategoryViewModel");
                xamlMember = new global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlMember(this, "IsTopAppBarVisible", "Boolean");
                xamlMember.Getter = get_9_CurrentCategoryViewModel_IsTopAppBarVisible;
                xamlMember.Setter = set_9_CurrentCategoryViewModel_IsTopAppBarVisible;
                break;
            case "Scanner.Windows.ViewModels.CurrentCategoryViewModel.BackCommand":
                userType = (global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Scanner.Windows.ViewModels.CurrentCategoryViewModel");
                xamlMember = new global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlMember(this, "BackCommand", "System.Windows.Input.ICommand");
                xamlMember.Getter = get_10_CurrentCategoryViewModel_BackCommand;
                xamlMember.SetIsReadOnly();
                break;
            case "Scanner.Windows.ViewModels.CurrentCategoryViewModel.DeleteDocumentCommand":
                userType = (global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Scanner.Windows.ViewModels.CurrentCategoryViewModel");
                xamlMember = new global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlMember(this, "DeleteDocumentCommand", "System.Windows.Input.ICommand");
                xamlMember.Getter = get_11_CurrentCategoryViewModel_DeleteDocumentCommand;
                xamlMember.SetIsReadOnly();
                break;
            case "Scanner.Windows.ViewModels.CurrentCategoryViewModel.DeleteCategoryCommand":
                userType = (global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Scanner.Windows.ViewModels.CurrentCategoryViewModel");
                xamlMember = new global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlMember(this, "DeleteCategoryCommand", "System.Windows.Input.ICommand");
                xamlMember.Getter = get_12_CurrentCategoryViewModel_DeleteCategoryCommand;
                xamlMember.SetIsReadOnly();
                break;
            case "Scanner.Windows.ViewModels.CurrentCategoryViewModel.MergeDocumentsCommand":
                userType = (global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Scanner.Windows.ViewModels.CurrentCategoryViewModel");
                xamlMember = new global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlMember(this, "MergeDocumentsCommand", "System.Windows.Input.ICommand");
                xamlMember.Getter = get_13_CurrentCategoryViewModel_MergeDocumentsCommand;
                xamlMember.SetIsReadOnly();
                break;
            case "Scanner.Windows.ViewModels.CurrentCategoryViewModel.RenameCategoryCommand":
                userType = (global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Scanner.Windows.ViewModels.CurrentCategoryViewModel");
                xamlMember = new global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlMember(this, "RenameCategoryCommand", "System.Windows.Input.ICommand");
                xamlMember.Getter = get_14_CurrentCategoryViewModel_RenameCategoryCommand;
                xamlMember.SetIsReadOnly();
                break;
            case "Scanner.Windows.ViewModels.CurrentCategoryViewModel.AddDocumentCommand":
                userType = (global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Scanner.Windows.ViewModels.CurrentCategoryViewModel");
                xamlMember = new global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlMember(this, "AddDocumentCommand", "System.Windows.Input.ICommand");
                xamlMember.Getter = get_15_CurrentCategoryViewModel_AddDocumentCommand;
                xamlMember.SetIsReadOnly();
                break;
            case "Scanner.Windows.ViewModels.CurrentCategoryViewModel.SelectionChangedCommand":
                userType = (global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Scanner.Windows.ViewModels.CurrentCategoryViewModel");
                xamlMember = new global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlMember(this, "SelectionChangedCommand", "System.Windows.Input.ICommand");
                xamlMember.Getter = get_16_CurrentCategoryViewModel_SelectionChangedCommand;
                xamlMember.SetIsReadOnly();
                break;
            case "Scanner.Windows.ViewModels.CurrentCategoryViewModel.NewScanCommand":
                userType = (global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Scanner.Windows.ViewModels.CurrentCategoryViewModel");
                xamlMember = new global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlMember(this, "NewScanCommand", "System.Windows.Input.ICommand");
                xamlMember.Getter = get_17_CurrentCategoryViewModel_NewScanCommand;
                xamlMember.SetIsReadOnly();
                break;
            case "Scanner.Windows.ViewModels.CurrentCategoryViewModel.PinCategoryCommand":
                userType = (global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Scanner.Windows.ViewModels.CurrentCategoryViewModel");
                xamlMember = new global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlMember(this, "PinCategoryCommand", "System.Windows.Input.ICommand");
                xamlMember.Getter = get_18_CurrentCategoryViewModel_PinCategoryCommand;
                xamlMember.SetIsReadOnly();
                break;
            case "Scanner.Windows.ViewModels.CurrentCategoryViewModel.DocumentItemClickCommand":
                userType = (global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Scanner.Windows.ViewModels.CurrentCategoryViewModel");
                xamlMember = new global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlMember(this, "DocumentItemClickCommand", "System.Windows.Input.ICommand");
                xamlMember.Getter = get_19_CurrentCategoryViewModel_DocumentItemClickCommand;
                xamlMember.SetIsReadOnly();
                break;
            case "Scanner.Windows.ViewModels.ViewModel.OnNavigatedToCommand":
                userType = (global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Scanner.Windows.ViewModels.ViewModel");
                xamlMember = new global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlMember(this, "OnNavigatedToCommand", "GalaSoft.MvvmLight.Command.RelayCommand`1<Object>");
                xamlMember.Getter = get_20_ViewModel_OnNavigatedToCommand;
                xamlMember.Setter = set_20_ViewModel_OnNavigatedToCommand;
                break;
            case "GalaSoft.MvvmLight.ViewModelBase.IsInDesignMode":
                userType = (global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("GalaSoft.MvvmLight.ViewModelBase");
                xamlMember = new global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlMember(this, "IsInDesignMode", "Boolean");
                xamlMember.Getter = get_21_ViewModelBase_IsInDesignMode;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.Xaml.Interactivity.Interaction.Behaviors":
                userType = (global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Xaml.Interactivity.Interaction");
                xamlMember = new global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlMember(this, "Behaviors", "Microsoft.Xaml.Interactivity.BehaviorCollection");
                xamlMember.SetTargetTypeName("Windows.UI.Xaml.DependencyObject");
                xamlMember.SetIsAttachable();
                xamlMember.Getter = get_22_Interaction_Behaviors;
                xamlMember.Setter = set_22_Interaction_Behaviors;
                break;
            case "Scanner.Windows.Common.GridViewSelectedItemBehavior.SelectedItems":
                userType = (global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Scanner.Windows.Common.GridViewSelectedItemBehavior");
                xamlMember = new global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlMember(this, "SelectedItems", "System.Collections.Generic.IList`1<Object>");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_23_GridViewSelectedItemBehavior_SelectedItems;
                xamlMember.Setter = set_23_GridViewSelectedItemBehavior_SelectedItems;
                break;
            case "Scanner.Windows.Common.Behavior`1<Windows.UI.Xaml.Controls.GridView>.AssociatedObject":
                userType = (global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Scanner.Windows.Common.Behavior`1<Windows.UI.Xaml.Controls.GridView>");
                xamlMember = new global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlMember(this, "AssociatedObject", "Windows.UI.Xaml.Controls.GridView");
                xamlMember.Getter = get_24_Behavior_AssociatedObject;
                xamlMember.Setter = set_24_Behavior_AssociatedObject;
                break;
            case "Microsoft.Xaml.Interactions.Core.EventTriggerBehavior.Actions":
                userType = (global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Xaml.Interactions.Core.EventTriggerBehavior");
                xamlMember = new global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlMember(this, "Actions", "Microsoft.Xaml.Interactivity.ActionCollection");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_25_EventTriggerBehavior_Actions;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.Xaml.Interactions.Core.EventTriggerBehavior.EventName":
                userType = (global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Xaml.Interactions.Core.EventTriggerBehavior");
                xamlMember = new global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlMember(this, "EventName", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_26_EventTriggerBehavior_EventName;
                xamlMember.Setter = set_26_EventTriggerBehavior_EventName;
                break;
            case "Microsoft.Xaml.Interactions.Core.EventTriggerBehavior.SourceObject":
                userType = (global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Xaml.Interactions.Core.EventTriggerBehavior");
                xamlMember = new global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlMember(this, "SourceObject", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_27_EventTriggerBehavior_SourceObject;
                xamlMember.Setter = set_27_EventTriggerBehavior_SourceObject;
                break;
            case "Microsoft.Xaml.Interactions.Core.EventTriggerBehavior.AssociatedObject":
                userType = (global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Xaml.Interactions.Core.EventTriggerBehavior");
                xamlMember = new global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlMember(this, "AssociatedObject", "Windows.UI.Xaml.DependencyObject");
                xamlMember.Getter = get_28_EventTriggerBehavior_AssociatedObject;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.Xaml.Interactions.Core.InvokeCommandAction.Command":
                userType = (global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Xaml.Interactions.Core.InvokeCommandAction");
                xamlMember = new global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlMember(this, "Command", "System.Windows.Input.ICommand");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_29_InvokeCommandAction_Command;
                xamlMember.Setter = set_29_InvokeCommandAction_Command;
                break;
            case "Microsoft.Xaml.Interactions.Core.InvokeCommandAction.InputConverter":
                userType = (global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Xaml.Interactions.Core.InvokeCommandAction");
                xamlMember = new global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlMember(this, "InputConverter", "Windows.UI.Xaml.Data.IValueConverter");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_30_InvokeCommandAction_InputConverter;
                xamlMember.Setter = set_30_InvokeCommandAction_InputConverter;
                break;
            case "Microsoft.Xaml.Interactions.Core.InvokeCommandAction.CommandParameter":
                userType = (global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Xaml.Interactions.Core.InvokeCommandAction");
                xamlMember = new global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlMember(this, "CommandParameter", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_31_InvokeCommandAction_CommandParameter;
                xamlMember.Setter = set_31_InvokeCommandAction_CommandParameter;
                break;
            case "Microsoft.Xaml.Interactions.Core.InvokeCommandAction.InputConverterParameter":
                userType = (global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Xaml.Interactions.Core.InvokeCommandAction");
                xamlMember = new global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlMember(this, "InputConverterParameter", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_32_InvokeCommandAction_InputConverterParameter;
                xamlMember.Setter = set_32_InvokeCommandAction_InputConverterParameter;
                break;
            case "Microsoft.Xaml.Interactions.Core.InvokeCommandAction.InputConverterLanguage":
                userType = (global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Xaml.Interactions.Core.InvokeCommandAction");
                xamlMember = new global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlMember(this, "InputConverterLanguage", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_33_InvokeCommandAction_InputConverterLanguage;
                xamlMember.Setter = set_33_InvokeCommandAction_InputConverterLanguage;
                break;
            case "Scanner.Windows.ViewModels.DocumentViewModel.CurrentDocument":
                userType = (global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Scanner.Windows.ViewModels.DocumentViewModel");
                xamlMember = new global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlMember(this, "CurrentDocument", "Scanner.Models.Document");
                xamlMember.Getter = get_34_DocumentViewModel_CurrentDocument;
                xamlMember.Setter = set_34_DocumentViewModel_CurrentDocument;
                break;
            case "Scanner.Windows.ViewModels.DocumentViewModel.CapturedImage":
                userType = (global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Scanner.Windows.ViewModels.DocumentViewModel");
                xamlMember = new global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlMember(this, "CapturedImage", "Windows.Storage.StorageFile");
                xamlMember.Getter = get_35_DocumentViewModel_CapturedImage;
                xamlMember.Setter = set_35_DocumentViewModel_CapturedImage;
                break;
            case "Scanner.Windows.ViewModels.DocumentViewModel.NavigationContext":
                userType = (global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Scanner.Windows.ViewModels.DocumentViewModel");
                xamlMember = new global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlMember(this, "NavigationContext", "Scanner.Windows.ViewModels.NavigationContext");
                xamlMember.Getter = get_36_DocumentViewModel_NavigationContext;
                xamlMember.Setter = set_36_DocumentViewModel_NavigationContext;
                break;
            case "Scanner.Windows.ViewModels.DocumentViewModel.CategoryNames":
                userType = (global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Scanner.Windows.ViewModels.DocumentViewModel");
                xamlMember = new global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlMember(this, "CategoryNames", "System.Collections.ObjectModel.ObservableCollection`1<String>");
                xamlMember.Getter = get_37_DocumentViewModel_CategoryNames;
                xamlMember.Setter = set_37_DocumentViewModel_CategoryNames;
                break;
            case "Scanner.Windows.ViewModels.DocumentViewModel.SelectedCategoryName":
                userType = (global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Scanner.Windows.ViewModels.DocumentViewModel");
                xamlMember = new global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlMember(this, "SelectedCategoryName", "String");
                xamlMember.Getter = get_38_DocumentViewModel_SelectedCategoryName;
                xamlMember.Setter = set_38_DocumentViewModel_SelectedCategoryName;
                break;
            case "Scanner.Windows.ViewModels.DocumentViewModel.SelectedItems":
                userType = (global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Scanner.Windows.ViewModels.DocumentViewModel");
                xamlMember = new global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlMember(this, "SelectedItems", "System.Collections.Generic.IList`1<Object>");
                xamlMember.Getter = get_39_DocumentViewModel_SelectedItems;
                xamlMember.Setter = set_39_DocumentViewModel_SelectedItems;
                break;
            case "Scanner.Windows.ViewModels.DocumentViewModel.IsBottomAppBarOpen":
                userType = (global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Scanner.Windows.ViewModels.DocumentViewModel");
                xamlMember = new global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlMember(this, "IsBottomAppBarOpen", "Boolean");
                xamlMember.Getter = get_40_DocumentViewModel_IsBottomAppBarOpen;
                xamlMember.Setter = set_40_DocumentViewModel_IsBottomAppBarOpen;
                break;
            case "Scanner.Windows.ViewModels.DocumentViewModel.IsBottomAppBarSticky":
                userType = (global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Scanner.Windows.ViewModels.DocumentViewModel");
                xamlMember = new global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlMember(this, "IsBottomAppBarSticky", "Boolean");
                xamlMember.Getter = get_41_DocumentViewModel_IsBottomAppBarSticky;
                xamlMember.Setter = set_41_DocumentViewModel_IsBottomAppBarSticky;
                break;
            case "Scanner.Windows.ViewModels.DocumentViewModel.DeleteCurrentDocumentCommand":
                userType = (global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Scanner.Windows.ViewModels.DocumentViewModel");
                xamlMember = new global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlMember(this, "DeleteCurrentDocumentCommand", "System.Windows.Input.ICommand");
                xamlMember.Getter = get_42_DocumentViewModel_DeleteCurrentDocumentCommand;
                xamlMember.SetIsReadOnly();
                break;
            case "Scanner.Windows.ViewModels.DocumentViewModel.BackCommand":
                userType = (global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Scanner.Windows.ViewModels.DocumentViewModel");
                xamlMember = new global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlMember(this, "BackCommand", "System.Windows.Input.ICommand");
                xamlMember.Getter = get_43_DocumentViewModel_BackCommand;
                xamlMember.SetIsReadOnly();
                break;
            case "Scanner.Windows.ViewModels.DocumentViewModel.AddPageCommand":
                userType = (global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Scanner.Windows.ViewModels.DocumentViewModel");
                xamlMember = new global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlMember(this, "AddPageCommand", "System.Windows.Input.ICommand");
                xamlMember.Getter = get_44_DocumentViewModel_AddPageCommand;
                xamlMember.SetIsReadOnly();
                break;
            case "Scanner.Windows.ViewModels.DocumentViewModel.PageItemClickCommand":
                userType = (global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Scanner.Windows.ViewModels.DocumentViewModel");
                xamlMember = new global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlMember(this, "PageItemClickCommand", "System.Windows.Input.ICommand");
                xamlMember.Getter = get_45_DocumentViewModel_PageItemClickCommand;
                xamlMember.SetIsReadOnly();
                break;
            case "Scanner.Windows.ViewModels.DocumentViewModel.AddFromGalleryCommand":
                userType = (global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Scanner.Windows.ViewModels.DocumentViewModel");
                xamlMember = new global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlMember(this, "AddFromGalleryCommand", "System.Windows.Input.ICommand");
                xamlMember.Getter = get_46_DocumentViewModel_AddFromGalleryCommand;
                xamlMember.SetIsReadOnly();
                break;
            case "Scanner.Windows.ViewModels.DocumentViewModel.RenameDocumentCommand":
                userType = (global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Scanner.Windows.ViewModels.DocumentViewModel");
                xamlMember = new global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlMember(this, "RenameDocumentCommand", "System.Windows.Input.ICommand");
                xamlMember.Getter = get_47_DocumentViewModel_RenameDocumentCommand;
                xamlMember.SetIsReadOnly();
                break;
            case "Scanner.Windows.ViewModels.DocumentViewModel.LoadCategoryNamesCommand":
                userType = (global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Scanner.Windows.ViewModels.DocumentViewModel");
                xamlMember = new global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlMember(this, "LoadCategoryNamesCommand", "System.Windows.Input.ICommand");
                xamlMember.Getter = get_48_DocumentViewModel_LoadCategoryNamesCommand;
                xamlMember.SetIsReadOnly();
                break;
            case "Scanner.Windows.ViewModels.DocumentViewModel.MoveToCategoryCommand":
                userType = (global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Scanner.Windows.ViewModels.DocumentViewModel");
                xamlMember = new global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlMember(this, "MoveToCategoryCommand", "System.Windows.Input.ICommand");
                xamlMember.Getter = get_49_DocumentViewModel_MoveToCategoryCommand;
                xamlMember.SetIsReadOnly();
                break;
            case "Scanner.Windows.ViewModels.DocumentViewModel.PinDocumentCommand":
                userType = (global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Scanner.Windows.ViewModels.DocumentViewModel");
                xamlMember = new global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlMember(this, "PinDocumentCommand", "System.Windows.Input.ICommand");
                xamlMember.Getter = get_50_DocumentViewModel_PinDocumentCommand;
                xamlMember.SetIsReadOnly();
                break;
            case "Scanner.Windows.ViewModels.DocumentViewModel.MergePagesCommand":
                userType = (global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Scanner.Windows.ViewModels.DocumentViewModel");
                xamlMember = new global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlMember(this, "MergePagesCommand", "System.Windows.Input.ICommand");
                xamlMember.Getter = get_51_DocumentViewModel_MergePagesCommand;
                xamlMember.SetIsReadOnly();
                break;
            case "Scanner.Windows.ViewModels.DocumentViewModel.DeletePagesCommand":
                userType = (global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Scanner.Windows.ViewModels.DocumentViewModel");
                xamlMember = new global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlMember(this, "DeletePagesCommand", "System.Windows.Input.ICommand");
                xamlMember.Getter = get_52_DocumentViewModel_DeletePagesCommand;
                xamlMember.SetIsReadOnly();
                break;
            case "Scanner.Windows.ViewModels.DocumentViewModel.SelectionChangedCommand":
                userType = (global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Scanner.Windows.ViewModels.DocumentViewModel");
                xamlMember = new global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlMember(this, "SelectionChangedCommand", "System.Windows.Input.ICommand");
                xamlMember.Getter = get_53_DocumentViewModel_SelectionChangedCommand;
                xamlMember.SetIsReadOnly();
                break;
            case "Scanner.Windows.ViewModels.MainViewModel.NavigateCommand":
                userType = (global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Scanner.Windows.ViewModels.MainViewModel");
                xamlMember = new global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlMember(this, "NavigateCommand", "System.Windows.Input.ICommand");
                xamlMember.Getter = get_54_MainViewModel_NavigateCommand;
                xamlMember.SetIsReadOnly();
                break;
            case "Scanner.Windows.ViewModels.MainViewModel.PhotoCommand":
                userType = (global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Scanner.Windows.ViewModels.MainViewModel");
                xamlMember = new global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlMember(this, "PhotoCommand", "System.Windows.Input.ICommand");
                xamlMember.Getter = get_55_MainViewModel_PhotoCommand;
                xamlMember.SetIsReadOnly();
                break;
            case "Scanner.Windows.ViewModels.MainViewModel.ImageProcessCommand":
                userType = (global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Scanner.Windows.ViewModels.MainViewModel");
                xamlMember = new global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlMember(this, "ImageProcessCommand", "System.Windows.Input.ICommand");
                xamlMember.Getter = get_56_MainViewModel_ImageProcessCommand;
                xamlMember.SetIsReadOnly();
                break;
            case "Scanner.Windows.ViewModels.MainViewModel.ImportCommand":
                userType = (global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Scanner.Windows.ViewModels.MainViewModel");
                xamlMember = new global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlMember(this, "ImportCommand", "System.Windows.Input.ICommand");
                xamlMember.Getter = get_57_MainViewModel_ImportCommand;
                xamlMember.SetIsReadOnly();
                break;
            case "Scanner.Windows.ViewModels.MainViewModel.GetAllDocumentsCommand":
                userType = (global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Scanner.Windows.ViewModels.MainViewModel");
                xamlMember = new global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlMember(this, "GetAllDocumentsCommand", "System.Windows.Input.ICommand");
                xamlMember.Getter = get_58_MainViewModel_GetAllDocumentsCommand;
                xamlMember.SetIsReadOnly();
                break;
            case "Scanner.Windows.ViewModels.MainViewModel.ShowNewCategoryDialogCommand":
                userType = (global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Scanner.Windows.ViewModels.MainViewModel");
                xamlMember = new global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlMember(this, "ShowNewCategoryDialogCommand", "System.Windows.Input.ICommand");
                xamlMember.Getter = get_59_MainViewModel_ShowNewCategoryDialogCommand;
                xamlMember.SetIsReadOnly();
                break;
            case "Scanner.Windows.ViewModels.MainViewModel.AddNewCategoryCommand":
                userType = (global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Scanner.Windows.ViewModels.MainViewModel");
                xamlMember = new global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlMember(this, "AddNewCategoryCommand", "System.Windows.Input.ICommand");
                xamlMember.Getter = get_60_MainViewModel_AddNewCategoryCommand;
                xamlMember.SetIsReadOnly();
                break;
            case "Scanner.Windows.ViewModels.MainViewModel.BatchModeCommand":
                userType = (global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Scanner.Windows.ViewModels.MainViewModel");
                xamlMember = new global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlMember(this, "BatchModeCommand", "System.Windows.Input.ICommand");
                xamlMember.Getter = get_61_MainViewModel_BatchModeCommand;
                xamlMember.SetIsReadOnly();
                break;
            case "Scanner.Windows.ViewModels.MainViewModel.AllCategoryDocumentsCommand":
                userType = (global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Scanner.Windows.ViewModels.MainViewModel");
                xamlMember = new global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlMember(this, "AllCategoryDocumentsCommand", "System.Windows.Input.ICommand");
                xamlMember.Getter = get_62_MainViewModel_AllCategoryDocumentsCommand;
                xamlMember.SetIsReadOnly();
                break;
            case "Scanner.Windows.ViewModels.MainViewModel.AllDocumentsCommand":
                userType = (global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Scanner.Windows.ViewModels.MainViewModel");
                xamlMember = new global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlMember(this, "AllDocumentsCommand", "System.Windows.Input.ICommand");
                xamlMember.Getter = get_63_MainViewModel_AllDocumentsCommand;
                xamlMember.SetIsReadOnly();
                break;
            case "Scanner.Windows.ViewModels.MainViewModel.DocumentItemClickCommand":
                userType = (global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Scanner.Windows.ViewModels.MainViewModel");
                xamlMember = new global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlMember(this, "DocumentItemClickCommand", "System.Windows.Input.ICommand");
                xamlMember.Getter = get_64_MainViewModel_DocumentItemClickCommand;
                xamlMember.SetIsReadOnly();
                break;
            case "Scanner.Windows.ViewModels.MainViewModel.LoadDataCommand":
                userType = (global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Scanner.Windows.ViewModels.MainViewModel");
                xamlMember = new global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlMember(this, "LoadDataCommand", "System.Windows.Input.ICommand");
                xamlMember.Getter = get_65_MainViewModel_LoadDataCommand;
                xamlMember.SetIsReadOnly();
                break;
            case "Scanner.Windows.ViewModels.MainViewModel.SortItemsCommand":
                userType = (global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Scanner.Windows.ViewModels.MainViewModel");
                xamlMember = new global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlMember(this, "SortItemsCommand", "System.Windows.Input.ICommand");
                xamlMember.Getter = get_66_MainViewModel_SortItemsCommand;
                xamlMember.SetIsReadOnly();
                break;
            case "Scanner.Windows.ViewModels.MainViewModel.NewCategoryString":
                userType = (global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Scanner.Windows.ViewModels.MainViewModel");
                xamlMember = new global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlMember(this, "NewCategoryString", "String");
                xamlMember.Getter = get_67_MainViewModel_NewCategoryString;
                xamlMember.Setter = set_67_MainViewModel_NewCategoryString;
                break;
            case "Scanner.Windows.ViewModels.MainViewModel.Categories":
                userType = (global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Scanner.Windows.ViewModels.MainViewModel");
                xamlMember = new global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlMember(this, "Categories", "System.Collections.ObjectModel.ObservableCollection`1<Scanner.Models.Category>");
                xamlMember.Getter = get_68_MainViewModel_Categories;
                xamlMember.Setter = set_68_MainViewModel_Categories;
                break;
            case "Scanner.Models.Category.CategoryDocuments":
                userType = (global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Scanner.Models.Category");
                xamlMember = new global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlMember(this, "CategoryDocuments", "System.Collections.ObjectModel.ObservableCollection`1<Scanner.Models.Document>");
                xamlMember.Getter = get_69_Category_CategoryDocuments;
                xamlMember.Setter = set_69_Category_CategoryDocuments;
                break;
            case "Scanner.Models.Document.Pages":
                userType = (global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Scanner.Models.Document");
                xamlMember = new global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlMember(this, "Pages", "System.Collections.ObjectModel.ObservableCollection`1<Scanner.Models.Page>");
                xamlMember.Getter = get_70_Document_Pages;
                xamlMember.Setter = set_70_Document_Pages;
                break;
            case "Scanner.Models.Page.ID":
                userType = (global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Scanner.Models.Page");
                xamlMember = new global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlMember(this, "ID", "Guid");
                xamlMember.Getter = get_71_Page_ID;
                xamlMember.Setter = set_71_Page_ID;
                break;
            case "Scanner.Models.Page.PageName":
                userType = (global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Scanner.Models.Page");
                xamlMember = new global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlMember(this, "PageName", "String");
                xamlMember.Getter = get_72_Page_PageName;
                xamlMember.Setter = set_72_Page_PageName;
                break;
            case "Scanner.Models.Page.DocumentId":
                userType = (global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Scanner.Models.Page");
                xamlMember = new global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlMember(this, "DocumentId", "Guid");
                xamlMember.Getter = get_73_Page_DocumentId;
                xamlMember.Setter = set_73_Page_DocumentId;
                break;
            case "Scanner.Models.Page.OriginalFilePath":
                userType = (global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Scanner.Models.Page");
                xamlMember = new global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlMember(this, "OriginalFilePath", "String");
                xamlMember.Getter = get_74_Page_OriginalFilePath;
                xamlMember.Setter = set_74_Page_OriginalFilePath;
                break;
            case "Scanner.Models.Page.ProcessedFilePath":
                userType = (global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Scanner.Models.Page");
                xamlMember = new global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlMember(this, "ProcessedFilePath", "String");
                xamlMember.Getter = get_75_Page_ProcessedFilePath;
                xamlMember.Setter = set_75_Page_ProcessedFilePath;
                break;
            case "Scanner.Models.Page.Number":
                userType = (global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Scanner.Models.Page");
                xamlMember = new global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlMember(this, "Number", "Int32");
                xamlMember.Getter = get_76_Page_Number;
                xamlMember.Setter = set_76_Page_Number;
                break;
            case "Scanner.Models.Page.Size":
                userType = (global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Scanner.Models.Page");
                xamlMember = new global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlMember(this, "Size", "UInt64");
                xamlMember.Getter = get_77_Page_Size;
                xamlMember.Setter = set_77_Page_Size;
                break;
            case "Scanner.Models.Page.IsFromCamera":
                userType = (global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Scanner.Models.Page");
                xamlMember = new global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlMember(this, "IsFromCamera", "Boolean");
                xamlMember.Getter = get_78_Page_IsFromCamera;
                xamlMember.Setter = set_78_Page_IsFromCamera;
                break;
            case "Scanner.Models.Page.MbSize":
                userType = (global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Scanner.Models.Page");
                xamlMember = new global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlMember(this, "MbSize", "Double");
                xamlMember.Getter = get_79_Page_MbSize;
                xamlMember.SetIsReadOnly();
                break;
            case "Scanner.Models.Document.DocumentName":
                userType = (global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Scanner.Models.Document");
                xamlMember = new global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlMember(this, "DocumentName", "String");
                xamlMember.Getter = get_80_Document_DocumentName;
                xamlMember.Setter = set_80_Document_DocumentName;
                break;
            case "Scanner.Models.Document.DateCreated":
                userType = (global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Scanner.Models.Document");
                xamlMember = new global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlMember(this, "DateCreated", "String");
                xamlMember.Getter = get_81_Document_DateCreated;
                xamlMember.Setter = set_81_Document_DateCreated;
                break;
            case "Scanner.Models.Document.TimeCreated":
                userType = (global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Scanner.Models.Document");
                xamlMember = new global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlMember(this, "TimeCreated", "String");
                xamlMember.Getter = get_82_Document_TimeCreated;
                xamlMember.Setter = set_82_Document_TimeCreated;
                break;
            case "Scanner.Models.Document.DocumentSize":
                userType = (global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Scanner.Models.Document");
                xamlMember = new global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlMember(this, "DocumentSize", "Double");
                xamlMember.Getter = get_83_Document_DocumentSize;
                xamlMember.Setter = set_83_Document_DocumentSize;
                break;
            case "Scanner.Models.Document.DocumentPageCounter":
                userType = (global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Scanner.Models.Document");
                xamlMember = new global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlMember(this, "DocumentPageCounter", "Int32");
                xamlMember.Getter = get_84_Document_DocumentPageCounter;
                xamlMember.SetIsReadOnly();
                break;
            case "Scanner.Models.Document.DocumentCategory":
                userType = (global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Scanner.Models.Document");
                xamlMember = new global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlMember(this, "DocumentCategory", "String");
                xamlMember.Getter = get_85_Document_DocumentCategory;
                xamlMember.Setter = set_85_Document_DocumentCategory;
                break;
            case "Scanner.Models.Document.ID":
                userType = (global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Scanner.Models.Document");
                xamlMember = new global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlMember(this, "ID", "Guid");
                xamlMember.Getter = get_86_Document_ID;
                xamlMember.Setter = set_86_Document_ID;
                break;
            case "Scanner.Models.Document.IsPinned":
                userType = (global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Scanner.Models.Document");
                xamlMember = new global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlMember(this, "IsPinned", "Boolean");
                xamlMember.Getter = get_87_Document_IsPinned;
                xamlMember.Setter = set_87_Document_IsPinned;
                break;
            case "Scanner.Models.Category.IsPinned":
                userType = (global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Scanner.Models.Category");
                xamlMember = new global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlMember(this, "IsPinned", "Boolean");
                xamlMember.Getter = get_88_Category_IsPinned;
                xamlMember.Setter = set_88_Category_IsPinned;
                break;
            case "Scanner.Models.Category.CategoryName":
                userType = (global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Scanner.Models.Category");
                xamlMember = new global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlMember(this, "CategoryName", "String");
                xamlMember.Getter = get_89_Category_CategoryName;
                xamlMember.Setter = set_89_Category_CategoryName;
                break;
            case "Scanner.Models.Category.ID":
                userType = (global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Scanner.Models.Category");
                xamlMember = new global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlMember(this, "ID", "Guid");
                xamlMember.Getter = get_90_Category_ID;
                xamlMember.Setter = set_90_Category_ID;
                break;
            case "Scanner.Windows.ViewModels.MainViewModel.NavigationContext":
                userType = (global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Scanner.Windows.ViewModels.MainViewModel");
                xamlMember = new global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlMember(this, "NavigationContext", "Scanner.Windows.ViewModels.NavigationContext");
                xamlMember.Getter = get_91_MainViewModel_NavigationContext;
                xamlMember.SetIsReadOnly();
                break;
            case "Scanner.Windows.ViewModels.MainViewModel.ComboBoxSelectedValue":
                userType = (global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Scanner.Windows.ViewModels.MainViewModel");
                xamlMember = new global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlMember(this, "ComboBoxSelectedValue", "String");
                xamlMember.Getter = get_92_MainViewModel_ComboBoxSelectedValue;
                xamlMember.Setter = set_92_MainViewModel_ComboBoxSelectedValue;
                break;
            case "Scanner.Windows.ViewModels.MainViewModel.IsFlyoutOpen":
                userType = (global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Scanner.Windows.ViewModels.MainViewModel");
                xamlMember = new global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlMember(this, "IsFlyoutOpen", "Boolean");
                xamlMember.Getter = get_93_MainViewModel_IsFlyoutOpen;
                xamlMember.Setter = set_93_MainViewModel_IsFlyoutOpen;
                break;
            case "Scanner.Core.ControlExtensions.FlyoutExtensions.IsOpen":
                userType = (global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Scanner.Core.ControlExtensions.FlyoutExtensions");
                xamlMember = new global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlMember(this, "IsOpen", "Boolean");
                xamlMember.SetTargetTypeName("Windows.UI.Xaml.DependencyObject");
                xamlMember.SetIsDependencyProperty();
                xamlMember.SetIsAttachable();
                xamlMember.Getter = get_94_FlyoutExtensions_IsOpen;
                xamlMember.Setter = set_94_FlyoutExtensions_IsOpen;
                break;
            case "Scanner.Core.ControlExtensions.FlyoutExtensions.Parent":
                userType = (global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Scanner.Core.ControlExtensions.FlyoutExtensions");
                xamlMember = new global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlMember(this, "Parent", "Windows.UI.Xaml.Controls.Button");
                xamlMember.SetTargetTypeName("Windows.UI.Xaml.DependencyObject");
                xamlMember.SetIsDependencyProperty();
                xamlMember.SetIsAttachable();
                xamlMember.Getter = get_95_FlyoutExtensions_Parent;
                xamlMember.Setter = set_95_FlyoutExtensions_Parent;
                break;
            case "Scanner.Windows.Views.PhotoView.CustomControl.CurrentPosition":
                userType = (global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Scanner.Windows.Views.PhotoView.CustomControl");
                xamlMember = new global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlMember(this, "CurrentPosition", "Windows.Foundation.Point");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_96_CustomControl_CurrentPosition;
                xamlMember.Setter = set_96_CustomControl_CurrentPosition;
                break;
            case "Scanner.Core.ControlExtentions.ImageExtensions.File":
                userType = (global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Scanner.Core.ControlExtentions.ImageExtensions");
                xamlMember = new global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlMember(this, "File", "Windows.Storage.StorageFile");
                xamlMember.SetTargetTypeName("Windows.UI.Xaml.UIElement");
                xamlMember.SetIsDependencyProperty();
                xamlMember.SetIsAttachable();
                xamlMember.Getter = get_97_ImageExtensions_File;
                xamlMember.Setter = set_97_ImageExtensions_File;
                break;
            case "Scanner.Windows.Views.PhotoView.CropControl.ImageFile":
                userType = (global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Scanner.Windows.Views.PhotoView.CropControl");
                xamlMember = new global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlMember(this, "ImageFile", "Windows.Storage.StorageFile");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_98_CropControl_ImageFile;
                xamlMember.Setter = set_98_CropControl_ImageFile;
                break;
            case "Scanner.Windows.Views.PhotoView.CropControl.LeftTopPosition":
                userType = (global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Scanner.Windows.Views.PhotoView.CropControl");
                xamlMember = new global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlMember(this, "LeftTopPosition", "Windows.Foundation.Point");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_99_CropControl_LeftTopPosition;
                xamlMember.Setter = set_99_CropControl_LeftTopPosition;
                break;
            case "Scanner.Windows.Views.PhotoView.CropControl.RightTopPosition":
                userType = (global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Scanner.Windows.Views.PhotoView.CropControl");
                xamlMember = new global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlMember(this, "RightTopPosition", "Windows.Foundation.Point");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_100_CropControl_RightTopPosition;
                xamlMember.Setter = set_100_CropControl_RightTopPosition;
                break;
            case "Scanner.Windows.Views.PhotoView.CropControl.LeftBottomPosition":
                userType = (global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Scanner.Windows.Views.PhotoView.CropControl");
                xamlMember = new global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlMember(this, "LeftBottomPosition", "Windows.Foundation.Point");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_101_CropControl_LeftBottomPosition;
                xamlMember.Setter = set_101_CropControl_LeftBottomPosition;
                break;
            case "Scanner.Windows.Views.PhotoView.CropControl.RightBottomPosition":
                userType = (global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Scanner.Windows.Views.PhotoView.CropControl");
                xamlMember = new global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlMember(this, "RightBottomPosition", "Windows.Foundation.Point");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_102_CropControl_RightBottomPosition;
                xamlMember.Setter = set_102_CropControl_RightBottomPosition;
                break;
            case "Scanner.Windows.Views.PhotoView.CropControl.LeftTopX":
                userType = (global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Scanner.Windows.Views.PhotoView.CropControl");
                xamlMember = new global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlMember(this, "LeftTopX", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_103_CropControl_LeftTopX;
                xamlMember.Setter = set_103_CropControl_LeftTopX;
                break;
            case "Scanner.Windows.Views.PhotoView.CropControl.LeftTopY":
                userType = (global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Scanner.Windows.Views.PhotoView.CropControl");
                xamlMember = new global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlMember(this, "LeftTopY", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_104_CropControl_LeftTopY;
                xamlMember.Setter = set_104_CropControl_LeftTopY;
                break;
            case "Scanner.Windows.Views.PhotoView.CropControl.RightTopX":
                userType = (global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Scanner.Windows.Views.PhotoView.CropControl");
                xamlMember = new global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlMember(this, "RightTopX", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_105_CropControl_RightTopX;
                xamlMember.Setter = set_105_CropControl_RightTopX;
                break;
            case "Scanner.Windows.Views.PhotoView.CropControl.RightTopY":
                userType = (global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Scanner.Windows.Views.PhotoView.CropControl");
                xamlMember = new global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlMember(this, "RightTopY", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_106_CropControl_RightTopY;
                xamlMember.Setter = set_106_CropControl_RightTopY;
                break;
            case "Scanner.Windows.Views.PhotoView.CropControl.LeftBottomX":
                userType = (global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Scanner.Windows.Views.PhotoView.CropControl");
                xamlMember = new global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlMember(this, "LeftBottomX", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_107_CropControl_LeftBottomX;
                xamlMember.Setter = set_107_CropControl_LeftBottomX;
                break;
            case "Scanner.Windows.Views.PhotoView.CropControl.LeftBottomY":
                userType = (global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Scanner.Windows.Views.PhotoView.CropControl");
                xamlMember = new global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlMember(this, "LeftBottomY", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_108_CropControl_LeftBottomY;
                xamlMember.Setter = set_108_CropControl_LeftBottomY;
                break;
            case "Scanner.Windows.Views.PhotoView.CropControl.RightBottomY":
                userType = (global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Scanner.Windows.Views.PhotoView.CropControl");
                xamlMember = new global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlMember(this, "RightBottomY", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_109_CropControl_RightBottomY;
                xamlMember.Setter = set_109_CropControl_RightBottomY;
                break;
            case "Scanner.Windows.Views.PhotoView.CropControl.RightBottomX":
                userType = (global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Scanner.Windows.Views.PhotoView.CropControl");
                xamlMember = new global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlMember(this, "RightBottomX", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_110_CropControl_RightBottomX;
                xamlMember.Setter = set_110_CropControl_RightBottomX;
                break;
            case "Scanner.Windows.Views.PhotoView.CropControl.CropActualWidth":
                userType = (global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Scanner.Windows.Views.PhotoView.CropControl");
                xamlMember = new global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlMember(this, "CropActualWidth", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_111_CropControl_CropActualWidth;
                xamlMember.Setter = set_111_CropControl_CropActualWidth;
                break;
            case "Scanner.Windows.Views.PhotoView.CropControl.CropActualHeight":
                userType = (global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Scanner.Windows.Views.PhotoView.CropControl");
                xamlMember = new global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlMember(this, "CropActualHeight", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_112_CropControl_CropActualHeight;
                xamlMember.Setter = set_112_CropControl_CropActualHeight;
                break;
            case "Scanner.Windows.ViewModels.PhotoViewModel.NavigationContext":
                userType = (global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Scanner.Windows.ViewModels.PhotoViewModel");
                xamlMember = new global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlMember(this, "NavigationContext", "Scanner.Windows.ViewModels.NavigationContext");
                xamlMember.Getter = get_113_PhotoViewModel_NavigationContext;
                xamlMember.Setter = set_113_PhotoViewModel_NavigationContext;
                break;
            case "Scanner.Windows.ViewModels.PhotoViewModel.CurrentCapturedData":
                userType = (global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Scanner.Windows.ViewModels.PhotoViewModel");
                xamlMember = new global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlMember(this, "CurrentCapturedData", "Scanner.Models.PhotoCapturedData");
                xamlMember.Getter = get_114_PhotoViewModel_CurrentCapturedData;
                xamlMember.Setter = set_114_PhotoViewModel_CurrentCapturedData;
                break;
            case "Scanner.Windows.ViewModels.PhotoViewModel.PageToProcces":
                userType = (global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Scanner.Windows.ViewModels.PhotoViewModel");
                xamlMember = new global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlMember(this, "PageToProcces", "Scanner.Models.Page");
                xamlMember.Getter = get_115_PhotoViewModel_PageToProcces;
                xamlMember.Setter = set_115_PhotoViewModel_PageToProcces;
                break;
            case "Scanner.Windows.ViewModels.PhotoViewModel.CapturedImage":
                userType = (global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Scanner.Windows.ViewModels.PhotoViewModel");
                xamlMember = new global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlMember(this, "CapturedImage", "Windows.Storage.StorageFile");
                xamlMember.Getter = get_116_PhotoViewModel_CapturedImage;
                xamlMember.Setter = set_116_PhotoViewModel_CapturedImage;
                break;
            case "Scanner.Windows.ViewModels.PhotoViewModel.RotationAngle":
                userType = (global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Scanner.Windows.ViewModels.PhotoViewModel");
                xamlMember = new global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlMember(this, "RotationAngle", "Double");
                xamlMember.Getter = get_117_PhotoViewModel_RotationAngle;
                xamlMember.Setter = set_117_PhotoViewModel_RotationAngle;
                break;
            case "Scanner.Windows.ViewModels.PhotoViewModel.Points":
                userType = (global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Scanner.Windows.ViewModels.PhotoViewModel");
                xamlMember = new global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlMember(this, "Points", "System.Collections.ObjectModel.ObservableCollection`1<Double>");
                xamlMember.Getter = get_118_PhotoViewModel_Points;
                xamlMember.Setter = set_118_PhotoViewModel_Points;
                break;
            case "Scanner.Windows.ViewModels.PhotoViewModel.PointsData":
                userType = (global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Scanner.Windows.ViewModels.PhotoViewModel");
                xamlMember = new global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlMember(this, "PointsData", "Scanner.Models.CropControlPointsData");
                xamlMember.Getter = get_119_PhotoViewModel_PointsData;
                xamlMember.Setter = set_119_PhotoViewModel_PointsData;
                break;
            case "Scanner.Windows.ViewModels.PhotoViewModel.CropControlWidth":
                userType = (global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Scanner.Windows.ViewModels.PhotoViewModel");
                xamlMember = new global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlMember(this, "CropControlWidth", "Double");
                xamlMember.Getter = get_120_PhotoViewModel_CropControlWidth;
                xamlMember.Setter = set_120_PhotoViewModel_CropControlWidth;
                break;
            case "Scanner.Windows.ViewModels.PhotoViewModel.CropControlHeight":
                userType = (global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Scanner.Windows.ViewModels.PhotoViewModel");
                xamlMember = new global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlMember(this, "CropControlHeight", "Double");
                xamlMember.Getter = get_121_PhotoViewModel_CropControlHeight;
                xamlMember.Setter = set_121_PhotoViewModel_CropControlHeight;
                break;
            case "Scanner.Windows.ViewModels.PhotoViewModel.RotateRightCommand":
                userType = (global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Scanner.Windows.ViewModels.PhotoViewModel");
                xamlMember = new global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlMember(this, "RotateRightCommand", "System.Windows.Input.ICommand");
                xamlMember.Getter = get_122_PhotoViewModel_RotateRightCommand;
                xamlMember.SetIsReadOnly();
                break;
            case "Scanner.Windows.ViewModels.PhotoViewModel.RotateLeftCommand":
                userType = (global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Scanner.Windows.ViewModels.PhotoViewModel");
                xamlMember = new global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlMember(this, "RotateLeftCommand", "System.Windows.Input.ICommand");
                xamlMember.Getter = get_123_PhotoViewModel_RotateLeftCommand;
                xamlMember.SetIsReadOnly();
                break;
            case "Scanner.Windows.ViewModels.PhotoViewModel.ProccesCommand":
                userType = (global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Scanner.Windows.ViewModels.PhotoViewModel");
                xamlMember = new global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlMember(this, "ProccesCommand", "System.Windows.Input.ICommand");
                xamlMember.Getter = get_124_PhotoViewModel_ProccesCommand;
                xamlMember.SetIsReadOnly();
                break;
            case "Scanner.Windows.ViewModels.PhotoViewModel.BackCommand":
                userType = (global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Scanner.Windows.ViewModels.PhotoViewModel");
                xamlMember = new global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlMember(this, "BackCommand", "System.Windows.Input.ICommand");
                xamlMember.Getter = get_125_PhotoViewModel_BackCommand;
                xamlMember.SetIsReadOnly();
                break;
            case "Scanner.Windows.ViewModels.PhotoViewModel.DeletePageCommand":
                userType = (global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Scanner.Windows.ViewModels.PhotoViewModel");
                xamlMember = new global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlMember(this, "DeletePageCommand", "System.Windows.Input.ICommand");
                xamlMember.Getter = get_126_PhotoViewModel_DeletePageCommand;
                xamlMember.SetIsReadOnly();
                break;
            case "Scanner.Windows.ViewModels.PhotoViewModel.ResetEdgesCommand":
                userType = (global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Scanner.Windows.ViewModels.PhotoViewModel");
                xamlMember = new global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlMember(this, "ResetEdgesCommand", "System.Windows.Input.ICommand");
                xamlMember.Getter = get_127_PhotoViewModel_ResetEdgesCommand;
                xamlMember.SetIsReadOnly();
                break;
            case "Scanner.Windows.ViewModels.PhotoViewModel.LoadPointPresetsCommand":
                userType = (global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Scanner.Windows.ViewModels.PhotoViewModel");
                xamlMember = new global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlMember(this, "LoadPointPresetsCommand", "System.Windows.Input.ICommand");
                xamlMember.Getter = get_128_PhotoViewModel_LoadPointPresetsCommand;
                xamlMember.SetIsReadOnly();
                break;
            case "Scanner.Windows.ViewModels.PostProccesViewModel.CurrentDocument":
                userType = (global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Scanner.Windows.ViewModels.PostProccesViewModel");
                xamlMember = new global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlMember(this, "CurrentDocument", "Scanner.Models.Document");
                xamlMember.Getter = get_129_PostProccesViewModel_CurrentDocument;
                xamlMember.Setter = set_129_PostProccesViewModel_CurrentDocument;
                break;
            case "Scanner.Windows.ViewModels.PostProccesViewModel.NavigationContext":
                userType = (global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Scanner.Windows.ViewModels.PostProccesViewModel");
                xamlMember = new global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlMember(this, "NavigationContext", "Scanner.Windows.ViewModels.NavigationContext");
                xamlMember.Getter = get_130_PostProccesViewModel_NavigationContext;
                xamlMember.SetIsReadOnly();
                break;
            case "Scanner.Windows.ViewModels.PostProccesViewModel.CapturedImage":
                userType = (global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Scanner.Windows.ViewModels.PostProccesViewModel");
                xamlMember = new global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlMember(this, "CapturedImage", "Windows.Storage.StorageFile");
                xamlMember.Getter = get_131_PostProccesViewModel_CapturedImage;
                xamlMember.Setter = set_131_PostProccesViewModel_CapturedImage;
                break;
            case "Scanner.Windows.ViewModels.PostProccesViewModel.SelectedPage":
                userType = (global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Scanner.Windows.ViewModels.PostProccesViewModel");
                xamlMember = new global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlMember(this, "SelectedPage", "Scanner.Models.Page");
                xamlMember.Getter = get_132_PostProccesViewModel_SelectedPage;
                xamlMember.Setter = set_132_PostProccesViewModel_SelectedPage;
                break;
            case "Scanner.Windows.ViewModels.PostProccesViewModel.BackCommand":
                userType = (global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Scanner.Windows.ViewModels.PostProccesViewModel");
                xamlMember = new global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlMember(this, "BackCommand", "System.Windows.Input.ICommand");
                xamlMember.Getter = get_133_PostProccesViewModel_BackCommand;
                xamlMember.SetIsReadOnly();
                break;
            case "Scanner.Windows.ViewModels.PostProccesViewModel.RescanCommand":
                userType = (global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Scanner.Windows.ViewModels.PostProccesViewModel");
                xamlMember = new global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlMember(this, "RescanCommand", "System.Windows.Input.ICommand");
                xamlMember.Getter = get_134_PostProccesViewModel_RescanCommand;
                xamlMember.SetIsReadOnly();
                break;
            case "Scanner.Windows.ViewModels.PostProccesViewModel.FlipViewSelectionChangedCommand":
                userType = (global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Scanner.Windows.ViewModels.PostProccesViewModel");
                xamlMember = new global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlMember(this, "FlipViewSelectionChangedCommand", "System.Windows.Input.ICommand");
                xamlMember.Getter = get_135_PostProccesViewModel_FlipViewSelectionChangedCommand;
                xamlMember.SetIsReadOnly();
                break;
            case "Scanner.Windows.ViewModels.PostProccesViewModel.DeletePageCommand":
                userType = (global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Scanner.Windows.ViewModels.PostProccesViewModel");
                xamlMember = new global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlMember(this, "DeletePageCommand", "System.Windows.Input.ICommand");
                xamlMember.Getter = get_136_PostProccesViewModel_DeletePageCommand;
                xamlMember.SetIsReadOnly();
                break;
            case "Scanner.Windows.ViewModels.PostProccesViewModel.SelectFilterCommand":
                userType = (global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Scanner.Windows.ViewModels.PostProccesViewModel");
                xamlMember = new global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlMember(this, "SelectFilterCommand", "System.Windows.Input.ICommand");
                xamlMember.Getter = get_137_PostProccesViewModel_SelectFilterCommand;
                xamlMember.SetIsReadOnly();
                break;
            case "Scanner.Windows.ViewModels.PostProccesViewModel.UndoRedoCommand":
                userType = (global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Scanner.Windows.ViewModels.PostProccesViewModel");
                xamlMember = new global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlMember(this, "UndoRedoCommand", "System.Windows.Input.ICommand");
                xamlMember.Getter = get_138_PostProccesViewModel_UndoRedoCommand;
                xamlMember.SetIsReadOnly();
                break;
            }
            return xamlMember;
        }
    }

    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlSystemBaseType : global::Windows.UI.Xaml.Markup.IXamlType
    {
        string _fullName;
        global::System.Type _underlyingType;

        public XamlSystemBaseType(string fullName, global::System.Type underlyingType)
        {
            _fullName = fullName;
            _underlyingType = underlyingType;
        }

        public string FullName { get { return _fullName; } }

        public global::System.Type UnderlyingType
        {
            get
            {
                return _underlyingType;
            }
        }

        virtual public global::Windows.UI.Xaml.Markup.IXamlType BaseType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlMember ContentProperty { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlMember GetMember(string name) { throw new global::System.NotImplementedException(); }
        virtual public bool IsArray { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsCollection { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsConstructible { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsDictionary { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsMarkupExtension { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsBindable { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsReturnTypeStub { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsLocalType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlType ItemType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlType KeyType { get { throw new global::System.NotImplementedException(); } }
        virtual public object ActivateInstance() { throw new global::System.NotImplementedException(); }
        virtual public void AddToMap(object instance, object key, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void AddToVector(object instance, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void RunInitializer()   { throw new global::System.NotImplementedException(); }
        virtual public object CreateFromString(string input)   { throw new global::System.NotImplementedException(); }
    }
    
    internal delegate object Activator();
    internal delegate void AddToCollection(object instance, object item);
    internal delegate void AddToDictionary(object instance, object key, object item);

    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlUserType : global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlSystemBaseType
    {
        global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlTypeInfoProvider _provider;
        global::Windows.UI.Xaml.Markup.IXamlType _baseType;
        bool _isArray;
        bool _isMarkupExtension;
        bool _isBindable;
        bool _isReturnTypeStub;
        bool _isLocalType;

        string _contentPropertyName;
        string _itemTypeName;
        string _keyTypeName;
        global::System.Collections.Generic.Dictionary<string, string> _memberNames;
        global::System.Collections.Generic.Dictionary<string, object> _enumValues;

        public XamlUserType(global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlTypeInfoProvider provider, string fullName, global::System.Type fullType, global::Windows.UI.Xaml.Markup.IXamlType baseType)
            :base(fullName, fullType)
        {
            _provider = provider;
            _baseType = baseType;
        }

        // --- Interface methods ----

        override public global::Windows.UI.Xaml.Markup.IXamlType BaseType { get { return _baseType; } }
        override public bool IsArray { get { return _isArray; } }
        override public bool IsCollection { get { return (CollectionAdd != null); } }
        override public bool IsConstructible { get { return (Activator != null); } }
        override public bool IsDictionary { get { return (DictionaryAdd != null); } }
        override public bool IsMarkupExtension { get { return _isMarkupExtension; } }
        override public bool IsBindable { get { return _isBindable; } }
        override public bool IsReturnTypeStub { get { return _isReturnTypeStub; } }
        override public bool IsLocalType { get { return _isLocalType; } }

        override public global::Windows.UI.Xaml.Markup.IXamlMember ContentProperty
        {
            get { return _provider.GetMemberByLongName(_contentPropertyName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlType ItemType
        {
            get { return _provider.GetXamlTypeByName(_itemTypeName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlType KeyType
        {
            get { return _provider.GetXamlTypeByName(_keyTypeName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlMember GetMember(string name)
        {
            if (_memberNames == null)
            {
                return null;
            }
            string longName;
            if (_memberNames.TryGetValue(name, out longName))
            {
                return _provider.GetMemberByLongName(longName);
            }
            return null;
        }

        override public object ActivateInstance()
        {
            return Activator(); 
        }

        override public void AddToMap(object instance, object key, object item) 
        {
            DictionaryAdd(instance, key, item);
        }

        override public void AddToVector(object instance, object item)
        {
            CollectionAdd(instance, item);
        }

        override public void RunInitializer() 
        {
            System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(UnderlyingType.TypeHandle);
        }

        override public object CreateFromString(string input)
        {
            if (_enumValues != null)
            {
                int value = 0;

                string[] valueParts = input.Split(',');

                foreach (string valuePart in valueParts) 
                {
                    object partValue;
                    int enumFieldValue = 0;
                    try
                    {
                        if (_enumValues.TryGetValue(valuePart.Trim(), out partValue))
                        {
                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                        }
                        else
                        {
                            try
                            {
                                enumFieldValue = global::System.Convert.ToInt32(valuePart.Trim());
                            }
                            catch( global::System.FormatException )
                            {
                                foreach( string key in _enumValues.Keys )
                                {
                                    if( string.Compare(valuePart.Trim(), key, global::System.StringComparison.OrdinalIgnoreCase) == 0 )
                                    {
                                        if( _enumValues.TryGetValue(key.Trim(), out partValue) )
                                        {
                                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                                            break;
                                        }
                                    }
                                }
                            }
                        }
                        value |= enumFieldValue; 
                    }
                    catch( global::System.FormatException )
                    {
                        throw new global::System.ArgumentException(input, FullName);
                    }
                }

                return value; 
            }
            throw new global::System.ArgumentException(input, FullName);
        }

        // --- End of Interface methods

        public Activator Activator { get; set; }
        public AddToCollection CollectionAdd { get; set; }
        public AddToDictionary DictionaryAdd { get; set; }

        public void SetContentPropertyName(string contentPropertyName)
        {
            _contentPropertyName = contentPropertyName;
        }

        public void SetIsArray()
        {
            _isArray = true; 
        }

        public void SetIsMarkupExtension()
        {
            _isMarkupExtension = true;
        }

        public void SetIsBindable()
        {
            _isBindable = true;
        }

        public void SetIsReturnTypeStub()
        {
            _isReturnTypeStub = true;
        }

        public void SetIsLocalType()
        {
            _isLocalType = true;
        }

        public void SetItemTypeName(string itemTypeName)
        {
            _itemTypeName = itemTypeName;
        }

        public void SetKeyTypeName(string keyTypeName)
        {
            _keyTypeName = keyTypeName;
        }

        public void AddMemberName(string shortName)
        {
            if(_memberNames == null)
            {
                _memberNames =  new global::System.Collections.Generic.Dictionary<string,string>();
            }
            _memberNames.Add(shortName, FullName + "." + shortName);
        }

        public void AddEnumValue(string name, object value)
        {
            if (_enumValues == null)
            {
                _enumValues = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            _enumValues.Add(name, value);
        }
    }

    internal delegate object Getter(object instance);
    internal delegate void Setter(object instance, object value);

    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlMember : global::Windows.UI.Xaml.Markup.IXamlMember
    {
        global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlTypeInfoProvider _provider;
        string _name;
        bool _isAttachable;
        bool _isDependencyProperty;
        bool _isReadOnly;

        string _typeName;
        string _targetTypeName;

        public XamlMember(global::Scanner.Windows.Scanner_Windows_XamlTypeInfo.XamlTypeInfoProvider provider, string name, string typeName)
        {
            _name = name;
            _typeName = typeName;
            _provider = provider;
        }

        public string Name { get { return _name; } }

        public global::Windows.UI.Xaml.Markup.IXamlType Type
        {
            get { return _provider.GetXamlTypeByName(_typeName); }
        }

        public void SetTargetTypeName(string targetTypeName)
        {
            _targetTypeName = targetTypeName;
        }
        public global::Windows.UI.Xaml.Markup.IXamlType TargetType
        {
            get { return _provider.GetXamlTypeByName(_targetTypeName); }
        }

        public void SetIsAttachable() { _isAttachable = true; }
        public bool IsAttachable { get { return _isAttachable; } }

        public void SetIsDependencyProperty() { _isDependencyProperty = true; }
        public bool IsDependencyProperty { get { return _isDependencyProperty; } }

        public void SetIsReadOnly() { _isReadOnly = true; }
        public bool IsReadOnly { get { return _isReadOnly; } }

        public Getter Getter { get; set; }
        public object GetValue(object instance)
        {
            if (Getter != null)
                return Getter(instance);
            else
                throw new global::System.InvalidOperationException("GetValue");
        }

        public Setter Setter { get; set; }
        public void SetValue(object instance, object value)
        {
            if (Setter != null)
                Setter(instance, value);
            else
                throw new global::System.InvalidOperationException("SetValue");
        }
    }
}


